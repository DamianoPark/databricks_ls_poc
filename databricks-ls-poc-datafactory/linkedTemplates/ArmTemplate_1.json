{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory 이름",
			"defaultValue": "databricks-ls-poc-datafactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/4_SIL_TO_GOL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is used to migrate source table to data lake(Curated) with full copy support. Pipeline is using value of source name and table name in configuration table. ",
				"activities": [
					{
						"name": "GET_CFG",
						"description": "Get migration table information from configuration table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GET_TIME",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [load_id]\n      ,[source_name]\n      ,[source]\n      ,[interface_id]\n      ,[interface_name]\n      ,[load_type]\n      ,[source_object_schema]\n      ,[source_object]\n      ,[source_field]\n      ,[source_condition]\n      ,[target_object_schema]\n      ,[target_object]\n      ,[target_field]\n      ,[target_condition]\n      ,[from]\n      ,[to]\n      ,[interval_type]\n      ,[r_mig_flg]\n      ,[b_mig_flg]\n      ,[c_mig_flg]\n      ,[usecase_id]\n      ,[src_sys_id]\n      ,[trigger_id]\n      ,[rest_call_url]\n      ,[synapse_object_schema]\n      ,[synapse_object]\n      ,[synapse_object_type]\n      ,NEWID() as ID \n      ,FORMAT(cast(DATEADD(HOUR,9,GETUTCDATE()) as datetime), 'yyyyMMddHHmmss') as 'yyyyMMddHHmmss'\n  FROM [META].[LOAD_INV_EAI]\n  WHERE 1=1\n  AND [r_mig_flg] = 1\n  AND [interface_id] = '@{pipeline().parameters.interface_id}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOR_EACH",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_CFG').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "GET_JOB_TIME",
									"description": "This activity is used to initialize TIME variable with pipeline start time",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "JOB_TIME",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Trans to GOLD",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_JOB_TIME",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureBlobFSSource",
											"recursive": true
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL",
											"type": "DatasetReference",
											"parameters": {
												"DLS_DR": {
													"value": "@{pipeline().parameters.SRC_DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}/",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@{item().source_object}.tsv",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL",
											"type": "DatasetReference",
											"parameters": {
												"DLS_DR": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}/",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@{item().source_object}.tsv",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP_INS_RAW_PIP_INFO",
									"type": "SqlServerStoredProcedure",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "Trans to GOLD",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_INS_PIP_INFO",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@{activity('Trans to GOLD').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_dr_nm": {
												"value": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}/",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fl_nm": {
												"value": {
													"value": "@{item().DL_FL_NM}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fs_nm": {
												"value": {
													"value": "@pipeline().parameters.DL_FS_NM",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_rec_cnt": {
												"value": {
													"value": "@item().src_rec_cnt",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"end_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"load_id": {
												"value": {
													"value": "@item().load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"load_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"mig_clm_nm": {
												"value": "c_mig_flg",
												"type": "String"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@item().SRC_REC_CNT",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start_time": {
												"value": {
													"value": "@activity('Trans to GOLD').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"usecase_id": {
												"value": {
													"value": "@item().usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Gold",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "SP_FAIL_ACT",
									"type": "SqlServerStoredProcedure",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "Trans to GOLD",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_FAIL_ACT",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@activity('Trans to GOLD').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"error_msg": {
												"value": {
													"value": "Trans to GOLD activity has failed, ErrorCode :@{activity('Trans to GOLD').Error.errorCode}",
													"type": "Expression"
												},
												"type": "String"
											},
											"load_id": {
												"value": {
													"value": "@item().load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@item().SRC_REC_CNT",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"usecase_id": {
												"value": {
													"value": "@item().usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Gold",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "GET_TIME",
						"description": "This activity is used to initialize TIME variable with pipeline start time",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TIME",
							"value": {
								"value": "@replace(replace(pipeline().parameters.WIND_STRT_TIME,':',''),'-','')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"META_DB_SRV_NM": {
						"type": "string",
						"defaultValue": "ls-dp-sql.database.windows.net"
					},
					"META_DB_NM": {
						"type": "string",
						"defaultValue": "sqldb-dataportal"
					},
					"META_USER_NM": {
						"type": "string",
						"defaultValue": "lseadmin"
					},
					"META_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-META-ASQL"
					},
					"DLS_URL": {
						"type": "string",
						"defaultValue": "https://databrickslspocsa.dfs.core.windows.net/"
					},
					"DL_FS_NM": {
						"type": "string",
						"defaultValue": "databrickslspocsa"
					},
					"DL_DR_NM": {
						"type": "string",
						"defaultValue": "gold"
					},
					"DL_FS_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-FS-ADLS"
					},
					"SRC_NM": {
						"type": "string",
						"defaultValue": "BRIDGE"
					},
					"SRC_DL_DR_NM": {
						"type": "string",
						"defaultValue": "silver"
					},
					"SP_INS_PIP_INFO": {
						"type": "string",
						"defaultValue": "Meta.SP_INS_RAW_PIP_INFO"
					},
					"SP_FAIL_ACT": {
						"type": "string",
						"defaultValue": "Meta.SP_FAIL_ACT"
					},
					"SP_UPD_MIG_FLG_INFO": {
						"type": "string",
						"defaultValue": "Meta.SP_DB_UPD_MIG_FLG_INFO"
					},
					"WIND_STRT_TIME": {
						"type": "string"
					},
					"PIPELINE_NAME": {
						"type": "string"
					},
					"interface_id": {
						"type": "string"
					}
				},
				"variables": {
					"TIME": {
						"type": "String"
					},
					"JOB_TIME": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/FRAMEWORK"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-06T01:00:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EAI_COMPLETED')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UNTIL",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(activity('GET_EAI_REST_LOG').output.count,1)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GET_EAI_REST_LOG",
									"description": "Get migration table information from configuration table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT *\n  FROM [META].[EAI_REST_LOG]\n  WHERE 1=1\n  AND [IF_DATETIME] = '@{pipeline().parameters.IF_DATETIME}'\n  AND [IF_ID] = '@{pipeline().parameters.IF_ID}'",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_FRW_ASQL_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().globalParameters.GP_META_DB_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().globalParameters.GP_BRIDGE_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().globalParameters.GP_META_USER_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().globalParameters.GP_BRIDGE_DB_KVS_NM",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "WAIT",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "GET_EAI_REST_LOG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 3
									}
								}
							],
							"timeout": "2:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"IF_ID": {
						"type": "string"
					},
					"IF_DATETIME": {
						"type": "string"
					}
				},
				"variables": {
					"X": {
						"type": "String"
					},
					"TMP_X": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/RESTCALL"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T09:13:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Origin_PL_COPY_FS_to_BLOB_v4_PC2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy local to source",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "테스트/"
							},
							{
								"name": "Destination",
								"value": "temp-monitoring/source/source.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@addminutes(utcnow(), -7200)",
										"type": "Expression"
									},
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 28
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ""
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "No.",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									},
									{
										"source": {
											"name": " Date&Time",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										}
									},
									{
										"source": {
											"name": " ms",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										}
									},
									{
										"source": {
											"name": "CH1",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										}
									},
									{
										"source": {
											"name": "CH2",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										}
									},
									{
										"source": {
											"name": "CH3",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										}
									},
									{
										"source": {
											"name": "CH4",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										}
									},
									{
										"source": {
											"name": "CH5",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										}
									},
									{
										"source": {
											"name": "CH6",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 9
										}
									},
									{
										"source": {
											"name": "CH7",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 10
										}
									},
									{
										"source": {
											"name": "CH8",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 11
										}
									},
									{
										"source": {
											"name": "CH9",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 12
										}
									},
									{
										"source": {
											"name": "CH10",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 13
										}
									},
									{
										"source": {
											"name": "Alarm1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 14
										}
									},
									{
										"source": {
											"name": "Alarm2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 15
										}
									},
									{
										"source": {
											"name": "AlarmOut",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 16
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false,
									"dateTimeFormat": "yyyy-MM-dd HH:mm:ss"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SRC_NAS_FS2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_BLOB_source_PC2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "If rowsCopied is greater than 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Copy local to source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Copy local to source').output.rowsCopied, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy local to input",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings",
												"skipLineCount": {
													"value": "@add(int(activity('Copy local to source').output.rowsRead),-7)",
													"type": "Expression"
												}
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": {
													"value": "@concat(convertTimeZone(utcnow(), 'Korea Standard Time', 'Korea Standard Time', '/yyyy-MM-dd/HH:mm:dd'),'.csv')",
													"type": "Expression"
												}
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"type": "String",
														"ordinal": 1
													},
													"sink": {
														"name": "No.",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "DateTime",
														"ordinal": 2
													},
													"sink": {
														"name": "Date&Time",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 3
													},
													"sink": {
														"name": "ms",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 4
													},
													"sink": {
														"name": "CH1",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 5
													},
													"sink": {
														"name": "CH2",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 6
													},
													"sink": {
														"name": "CH3",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 7
													},
													"sink": {
														"name": "CH4",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 8
													},
													"sink": {
														"name": "CH5",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 9
													},
													"sink": {
														"name": "CH6",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 10
													},
													"sink": {
														"name": "CH7",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 11
													},
													"sink": {
														"name": "CH8",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 12
													},
													"sink": {
														"name": "CH9",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 13
													},
													"sink": {
														"name": "CH10",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 14
													},
													"sink": {
														"name": "Alarm1",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 15
													},
													"sink": {
														"name": "Alarm2",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 16
													},
													"sink": {
														"name": "AlarmOut",
														"physicalType": "String"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_BLOB_source_PC2",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_BLOB_input_PC2",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy local to output",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy local to input",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings",
												"skipLineCount": 28
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"type": "String",
														"ordinal": 1
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 1
													}
												},
												{
													"source": {
														"type": "DateTime",
														"ordinal": 2
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 2
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 3
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 3
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 4
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 4
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 5
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 5
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 6
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 6
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 7
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 7
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 8
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 8
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 9
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 9
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 10
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 10
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 11
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 11
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 12
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 12
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 13
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 13
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 14
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 14
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 15
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 15
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 16
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 16
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_BLOB_source_PC2",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_BLOB_ouput_PC2",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "99. TEMP/TEMP_MONITORING"
				},
				"annotations": [],
				"lastPublishTime": "2025-02-06T00:50:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_SRC_TO_BRZ')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is used to migrate source table to data lake(RAW) with full copy support. Pipeline is using value of source name and table name in configuration table. ",
				"activities": [
					{
						"name": "GET_CFG",
						"description": "Get migration table information from configuration table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GET_TIME",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [load_id]\n      ,[source_name]\n      ,[source]\n      ,[interface_id]\n      ,[interface_name]\n      ,[load_type]\n      ,[source_object_schema]\n      ,[source_object]\n      ,[source_field]\n      ,[source_condition]\n      ,[target_object_schema]\n      ,[target_object]\n      ,[target_field]\n      ,[target_condition]\n      ,[from]\n      ,[to]\n      ,[interval_type]\n      ,[r_mig_flg]\n      ,[b_mig_flg]\n      ,[c_mig_flg]\n      ,[usecase_id]\n      ,[src_sys_id]\n      ,[trigger_id]\n      ,[rest_call_url]\n      ,[synapse_object_schema]\n      ,[synapse_object]\n      ,[synapse_object_type]\n      ,NEWID() as ID \n      ,FORMAT(cast(DATEADD(HOUR,9,GETUTCDATE()) as datetime), 'yyyyMMddHHmmss') as 'yyyyMMddHHmmss'\n  FROM [META].[LOAD_INV_EAI]\n  WHERE 1=1\n  AND [r_mig_flg] = 1\n  AND [interface_id] = '@{pipeline().parameters.interface_id}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_DB_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FILTER_1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_CFG').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().load_type,'full')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FILTER_2",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [
							{
								"name": "TIME",
								"value": "@{concat(pipeline().parameters.DL_DR_NM, '/', item().source_name, '/', item().source, '/', item().source_object, '-ALL/', variables('TIME'))}/@{concat(item().source_object, '.snappy.parquet')}"
							}
						],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_CFG').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().load_type,'incremental')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FOR_EACH_1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FILTER_1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FILTER_1').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "GET_SRC_REC_CNT",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "SELECT \n    CASE \n        WHEN EXISTS (\n            SELECT 1 \n            FROM ALL_TABLES \n            WHERE OWNER = UPPER('@{pipeline().parameters.source_object_schema}')\n              AND TABLE_NAME = UPPER('@{item().source_object}')\n        ) \n        THEN (\n            SELECT COUNT(*) \n            FROM @{pipeline().parameters.source_object_schema}.@{item().source_object}\n        )\n        ELSE 0\n    END AS src_rec_cnt\nFROM DUAL\n",
												"type": "Expression"
											},
											"partitionOption": "None",
											"numberPrecision": 38,
											"numberScale": 18,
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "ERP_Oracle",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "COPY_TO_ADLS_LOG",
									"description": "@{concat(pipeline().parameters.DL_DR_NM, '/', item().source_name, '/', item().source, '/', item().source_object, '-ALL/', variables('TIME'))}/@{concat(item().source_object, '.snappy.parquet')}",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_SRC_REC_CNT",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "."
										},
										{
											"name": "Destination",
											"value": "@{concat(pipeline().parameters.DL_DR_NM, '/', item().source_name, '/', item().source, '/', item().source_object, '-ALL/', replace(replace(pipeline().parameters.WIND_STRT_TIME,':',''),'-',''))}/@{concat(item().source_object, '.snappy.parquet')}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "SELECT * \nFROM @{pipeline().parameters.source_object_schema}.@{item().source_object}\nWHERE EXISTS (\n    SELECT 1 \n    FROM ALL_TAB_COLUMNS\n    WHERE OWNER = '@{pipeline().parameters.source_object_schema}'\n      AND TABLE_NAME = '@{item().source_object}'\n)",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ERP_Oracle",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL",
											"type": "DatasetReference",
											"parameters": {
												"DLS_DR": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}-ALL/@{variables('TIME')}",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@{item().source_object}.tsv",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP_INS_RAW_PIP_INFO_LOG",
									"type": "SqlServerStoredProcedure",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "COPY_TO_ADLS_LOG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_INS_PIP_INFO",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@{activity('COPY_TO_ADLS_LOG').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_dr_nm": {
												"value": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}-ALL/@{variables('TIME')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fl_nm": {
												"value": {
													"value": "@{item().source_object}.snappy.parquet",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fs_nm": {
												"value": {
													"value": "@pipeline().parameters.DL_FS_NM",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_rec_cnt": {
												"value": {
													"value": "@activity('COPY_TO_ADLS_LOG').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"end_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"load_id": {
												"value": {
													"value": "@item().load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"load_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"mig_clm_nm": {
												"value": "r_mig_flg",
												"type": "String"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@activity('GET_SRC_REC_CNT').output.firstRow.src_rec_cnt",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start_time": {
												"value": {
													"value": "@pipeline().parameters.WIND_STRT_TIME",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"usecase_id": {
												"value": {
													"value": "@item().usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Bronze",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "COPY_TO_ADLS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_SRC_REC_CNT",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "."
										},
										{
											"name": "Destination",
											"value": "@{concat(pipeline().parameters.DL_DR_NM, '/', item().source_name, '/', item().source_object, IF(equals(item().load_type,'full'),'-ALL',''), '/Latest/')}/@{concat(item().source_object, '.snappy.parquet')}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "SELECT * \nFROM @{pipeline().parameters.source_object_schema}.@{item().source_object}\nWHERE EXISTS (\n    SELECT 1 \n    FROM ALL_TAB_COLUMNS\n    WHERE OWNER = '@{pipeline().parameters.source_object_schema}'\n      AND TABLE_NAME = '@{item().source_object}'\n)",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ERP_Oracle",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL",
											"type": "DatasetReference",
											"parameters": {
												"DLS_DR": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}-ALL/Latest/",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@{item().source_object}.tsv",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP_INS_RAW_PIP_INFO",
									"type": "SqlServerStoredProcedure",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "COPY_TO_ADLS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_INS_PIP_INFO",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@{activity('COPY_TO_ADLS').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_dr_nm": {
												"value": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}-ALL/Latest/",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fl_nm": {
												"value": {
													"value": "@{item().source_object}.snappy.parquet",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fs_nm": {
												"value": {
													"value": "@pipeline().parameters.DL_FS_NM",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_rec_cnt": {
												"value": {
													"value": "@activity('COPY_TO_ADLS').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"end_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"load_id": {
												"value": {
													"value": "@item().load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"load_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"mig_clm_nm": {
												"value": "r_mig_flg",
												"type": "String"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@activity('GET_SRC_REC_CNT').output.firstRow.src_rec_cnt",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start_time": {
												"value": {
													"value": "@pipeline().parameters.WIND_STRT_TIME",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"usecase_id": {
												"value": {
													"value": "@item().usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Bronze",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_DB_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "LOG",
									"type": "IfCondition",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "COPY_TO_ADLS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('COPY_TO_ADLS').output.executionDetails[0].status,'Succeeded')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "FAIL",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[SP_ETL_DATA_INSERT_LOG]",
													"storedProcedureParameters": {
														"err_mesg": {
															"value": {
																"value": "ErrorCode :@{activity('COPY_TO_ADLS').Error.errorCode}",
																"type": "Expression"
															},
															"type": "String"
														},
														"load_cnt": {
															"value": {
																"value": "@activity('COPY_TO_ADLS').output.rowsRead",
																"type": "Expression"
															},
															"type": "Decimal"
														},
														"parm_from": {
															"value": null,
															"type": "String"
														},
														"parm_to": {
															"value": null,
															"type": "String"
														},
														"pgm_status": {
															"value": "E",
															"type": "String"
														},
														"run_pgm": {
															"value": {
																"value": "@concat('BRIDGE','_','SYN','_',item().synapse_object_schema,'.',item().synapse_object)",
																"type": "Expression"
															},
															"type": "String"
														},
														"st_date": {
															"value": {
																"value": "@formatDateTime(concat(substring(item().yyyyMMddHHmmss,0,4),'-',substring(item().yyyyMMddHHmmss,4,2),'-',substring(item().yyyyMMddHHmmss,6,2)),'yyyy-MM-dd')",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"tgt_job_area": {
															"value": "ODS",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "syndpdatawarehouse",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SUCCESS",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[SP_ETL_DATA_INSERT_LOG]",
													"storedProcedureParameters": {
														"err_mesg": {
															"value": null,
															"type": "String"
														},
														"load_cnt": {
															"value": {
																"value": "@activity('COPY_TO_ADLS').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Decimal"
														},
														"parm_from": {
															"value": null,
															"type": "String"
														},
														"parm_to": {
															"value": null,
															"type": "String"
														},
														"pgm_status": {
															"value": "S",
															"type": "String"
														},
														"run_pgm": {
															"value": {
																"value": "@concat('BRIDGE','_','SYN','_',item().synapse_object_schema,'.',item().synapse_object)",
																"type": "Expression"
															},
															"type": "String"
														},
														"st_date": {
															"value": {
																"value": "@formatDateTime(concat(substring(item().yyyyMMddHHmmss,0,4),'-',substring(item().yyyyMMddHHmmss,4,2),'-',substring(item().yyyyMMddHHmmss,6,2)),'yyyy-MM-dd')",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"tgt_job_area": {
															"value": "ODS",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "syndpdatawarehouse",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "FOR_EACH_2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FILTER_2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FILTER_2').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "2_PL_COPY_SRC_TO_BRZ_ASQL_EAI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "2_SRC_TO_BRZ_SUB",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"WIND_STRT_TIME": {
												"value": "@pipeline().parameters.WIND_STRT_TIME",
												"type": "Expression"
											},
											"IF_ID": {
												"value": "@item().interface_id",
												"type": "Expression"
											},
											"PIPELINE_NAME": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "GET_TIME",
						"description": "This activity is used to initialize TIME variable with pipeline start time",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TIME",
							"value": {
								"value": "@replace(replace(pipeline().parameters.WIND_STRT_TIME,':',''),'-','')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"META_DB_SRV_NM": {
						"type": "string",
						"defaultValue": "ls-dp-sql.database.windows.net"
					},
					"META_DB_NM": {
						"type": "string",
						"defaultValue": "sqldb-dataportal"
					},
					"META_DB_USER_NM": {
						"type": "string",
						"defaultValue": "lseadmin"
					},
					"META_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-META-ASQL"
					},
					"META_TBL_NM": {
						"type": "string",
						"defaultValue": "Meta.LOAD_INV_EAI"
					},
					"DLS_URL": {
						"type": "string",
						"defaultValue": "https://databrickslspocsa.dfs.core.windows.net/"
					},
					"DL_FS_NM": {
						"type": "string",
						"defaultValue": "databrickslspocsa"
					},
					"DL_DR_NM": {
						"type": "string",
						"defaultValue": "bronze"
					},
					"DL_FS_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-FS-ADLS"
					},
					"SP_INS_PIP_INFO": {
						"type": "string",
						"defaultValue": "Meta.SP_INS_RAW_PIP_INFO"
					},
					"SP_FAIL_ACT": {
						"type": "string",
						"defaultValue": "Meta.SP_FAIL_ACT"
					},
					"WIND_STRT_TIME": {
						"type": "string"
					},
					"LK_SRC_SRV_NM": {
						"type": "string",
						"defaultValue": "synw-datawarehouse-prod-001.sql.azuresynapse.net"
					},
					"LK_SRC_DB_NM": {
						"type": "string",
						"defaultValue": "syndpdatawarehouse"
					},
					"LK_SRC_USER_NM": {
						"type": "string",
						"defaultValue": "sqladminuser"
					},
					"LK_SRC_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "PROD-KVS-FRW-ADW-SYN"
					},
					"interface_id": {
						"type": "string"
					},
					"source_object_schema": {
						"type": "string"
					}
				},
				"variables": {
					"TIME": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/FRAMEWORK"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-07T02:03:24Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_1min_Origin_PL_COPY_FS_to_BLOB_v4_PC2')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "분마다 Origin_PL_COPY_FS_to_BLOB_v4_PC2 트리",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Origin_PL_COPY_FS_to_BLOB_v4_PC2",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2025-07-21T01:07:00",
						"endTime": "2025-08-31T01:07:00",
						"timeZone": "Korea Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Origin_PL_COPY_FS_to_BLOB_v4_PC2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_WORKFLOW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SRC_TO_BRZ",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "2_SRC_TO_BRZ",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WIND_STRT_TIME": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"interface_id": {
									"value": "@pipeline().parameters.interface_id",
									"type": "Expression"
								},
								"source_object_schema": {
									"value": "@pipeline().parameters.source_object_schema",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "BRZ_TO_SIV",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SRC_TO_BRZ",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "3_BRZ_TO_SIV",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WIND_STRT_TIME": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PIPELINE_NAME": {
									"value": "@activity('SRC_TO_BRZ').output.pipelineName",
									"type": "Expression"
								},
								"interface_id": {
									"value": "@pipeline().parameters.interface_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SIL_TO_GOL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "BRZ_TO_SIV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "4_SIL_TO_GOL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WIND_STRT_TIME": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PIPELINE_NAME": {
									"value": "@activity('BRZ_TO_SIV').output.pipelineName",
									"type": "Expression"
								},
								"interface_id": {
									"value": "@pipeline().parameters.interface_id",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"interface_id": {
						"type": "string"
					},
					"source_object_schema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/FRAMEWORK"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-07T01:57:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/2_SRC_TO_BRZ')]",
				"[concat(variables('factoryId'), '/pipelines/4_SIL_TO_GOL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FND_TERRITORIES_TL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GET_CFG_copy1",
						"description": "Get migration table information from configuration table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [load_id]\n      ,[source_name]\n      ,[interface_id]\n      ,[interface_name]\n      ,[load_type]\n      ,[source_object_schema]\n      ,[source_object]\n      ,[source_field]\n      ,[source_condition]\n      ,[target_object_schema]\n      ,[target_object]\n      ,[target_field]\n      ,[target_condition]\n      ,[from]\n      ,[to]\n      ,[interval_type]\n      ,[r_mig_flg]\n      ,[b_mig_flg]\n      ,[c_mig_flg]\n      ,[usecase_id]\n      ,[src_sys_id]\n      ,[trigger_id]\n      ,[rest_call_url]\n      ,[synapse_object_schema]\n      ,[synapse_object]\n      ,[synapse_object_type]\n      ,NEWID() as ID \n      ,FORMAT(cast(DATEADD(HOUR,9,GETUTCDATE()) as datetime), 'yyyyMMddHHmmss') as 'yyyyMMddHHmmss'\n  FROM [META].[LOAD_INV_EAI]\n  WHERE 1=1\n  AND [interface_id] = '@{variables('IF_ID')}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().globalParameters.GP_META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().globalParameters.GP_META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().globalParameters.GP_META_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().globalParameters.GP_META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "WORKFLOW_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GET_CFG_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "1_WORKFLOW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"interface_id": {
									"value": "@variables('IF_ID')",
									"type": "Expression"
								},
								"source_object_schema": {
									"value": "@variables('source_object_schema')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"IF_ID": {
						"type": "String",
						"defaultValue": "IF_SRD_DPS_ERP_0061"
					},
					"source_object_schema": {
						"type": "String",
						"defaultValue": "APPLSYS"
					}
				},
				"folder": {
					"name": "2ND PROJECT/1. EAI/ERP/FULL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/1_WORKFLOW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ORIGIN_FND_TERRITORIES_TL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRUNCATE_BRIDGE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_FRW_ASQL",
							"type": "LinkedServiceReference",
							"parameters": {
								"SRC_SRV_NM": {
									"value": "@pipeline().globalParameters.GP_META_DB_SRV_NM",
									"type": "Expression"
								},
								"SRC_DB_NM": {
									"value": "@pipeline().globalParameters.GP_BRIDGE_DB_NM",
									"type": "Expression"
								},
								"SRC_USER_NM": {
									"value": "@pipeline().globalParameters.GP_META_USER_NM",
									"type": "Expression"
								},
								"SRC_DB_KVS_NM": {
									"value": "@pipeline().globalParameters.GP_BRIDGE_DB_KVS_NM",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "IF EXISTS (SELECT * FROM sys.objects WHERE 1=1 AND name = N'@{activity('GET_CFG').output.firstRow.source_object}' AND type = N'U')\nTRUNCATE TABLE [@{activity('GET_CFG').output.firstRow.source_object_schema}].[@{activity('GET_CFG').output.firstRow.source_object}]",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "GET_CFG",
						"description": "Get migration table information from configuration table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [load_id]\n      ,[source_name]\n      ,[interface_id]\n      ,[interface_name]\n      ,[load_type]\n      ,[source_object_schema]\n      ,[source_object]\n      ,[source_field]\n      ,[source_condition]\n      ,[target_object_schema]\n      ,[target_object]\n      ,[target_field]\n      ,[target_condition]\n      ,[from]\n      ,[to]\n      ,[interval_type]\n      ,[r_mig_flg]\n      ,[b_mig_flg]\n      ,[c_mig_flg]\n      ,[usecase_id]\n      ,[src_sys_id]\n      ,[trigger_id]\n      ,[rest_call_url]\n      ,[synapse_object_schema]\n      ,[synapse_object]\n      ,[synapse_object_type]\n      ,NEWID() as ID \n      ,FORMAT(cast(DATEADD(HOUR,9,GETUTCDATE()) as datetime), 'yyyyMMddHHmmss') as 'yyyyMMddHHmmss'\n  FROM [META].[LOAD_INV_EAI]\n  WHERE 1=1\n  AND [interface_id] = '@{variables('IF_ID')}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().globalParameters.GP_META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().globalParameters.GP_META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().globalParameters.GP_META_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().globalParameters.GP_META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "WORKFLOW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "COMPLETED",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "1_WORKFLOW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"interface_id": {
									"value": "@variables('IF_ID')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SET_BODY",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "TRUNCATE_BRIDGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "BODY",
							"value": {
								"value": "@concat('{\n    \"request\": {\n        \"header\": {\n            \"IF_ID\": \"',variables('IF_ID'),'\",\n            \"IF_GUUID\": \"',activity('GET_CFG').output.firstRow.ID,'\",\n            \"IF_UUID\": \"',activity('GET_CFG').output.firstRow.ID,'\",\n            \"IF_DATETIME\": \"',activity('GET_CFG').output.firstRow.yyyyMMddHHmmss,'\"\n        },\n        \"body\": {\n            \"IF_TOTAL_CNT\": \"0\",\n            \"IF_SPLIT_CNT\": \"1\",\n            \"IF_SPLIT_SEQ\": \"1\",\n            \"IF_REQ_DATA\": [{}]\n        }\n    }\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "REST_CALL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "SET_BODY",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GET_CFG').output.firstRow.rest_call_url,'dev')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WEB_PROD",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {},
										"httpRequestTimeout": "00:07:00",
										"url": {
											"value": "@pipeline().globalParameters.GP_EAI_URL_PROD",
											"type": "Expression"
										},
										"body": {
											"value": "@{variables('BODY')}",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WEB_DEV",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {},
										"httpRequestTimeout": "00:10:00",
										"url": {
											"value": "@pipeline().globalParameters.GP_EAI_URL_DEV",
											"type": "Expression"
										},
										"body": {
											"value": "@{variables('BODY')}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "COMPLETED",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "REST_CALL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EAI_COMPLETED",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"IF_ID": {
									"value": "@variables('IF_ID')",
									"type": "Expression"
								},
								"IF_DATETIME": {
									"value": "@activity('GET_CFG').output.firstRow.yyyyMMddHHmmss",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "WORKFLOW_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "1_WORKFLOW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"interface_id": {
									"value": "@variables('IF_ID')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"DESCRIPTION": {
						"type": "String",
						"defaultValue": "국가 및 권역 정보"
					},
					"BODY": {
						"type": "String",
						"defaultValue": "-------- BODY --------"
					},
					"IF_ID": {
						"type": "String",
						"defaultValue": "IF_SRD_DPS_ERP_0061"
					},
					"IF_REQ_DATA": {
						"type": "String",
						"defaultValue": "-------- PARAM --------"
					}
				},
				"folder": {
					"name": "2ND PROJECT/1. EAI/ERP/FULL"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-02T02:54:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/1_WORKFLOW')]",
				"[concat(variables('factoryId'), '/pipelines/EAI_COMPLETED')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RA_TERRITORIES_TL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GET_CFG_copy1",
						"description": "Get migration table information from configuration table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [load_id]\n      ,[source_name]\n      ,[interface_id]\n      ,[interface_name]\n      ,[load_type]\n      ,[source_object_schema]\n      ,[source_object]\n      ,[source_field]\n      ,[source_condition]\n      ,[target_object_schema]\n      ,[target_object]\n      ,[target_field]\n      ,[target_condition]\n      ,[from]\n      ,[to]\n      ,[interval_type]\n      ,[r_mig_flg]\n      ,[b_mig_flg]\n      ,[c_mig_flg]\n      ,[usecase_id]\n      ,[src_sys_id]\n      ,[trigger_id]\n      ,[rest_call_url]\n      ,[synapse_object_schema]\n      ,[synapse_object]\n      ,[synapse_object_type]\n      ,NEWID() as ID \n      ,FORMAT(cast(DATEADD(HOUR,9,GETUTCDATE()) as datetime), 'yyyyMMddHHmmss') as 'yyyyMMddHHmmss'\n  FROM [META].[LOAD_INV_EAI]\n  WHERE 1=1\n  AND [interface_id] = '@{variables('IF_ID')}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().globalParameters.GP_META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().globalParameters.GP_META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().globalParameters.GP_META_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().globalParameters.GP_META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "WORKFLOW_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GET_CFG_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "1_WORKFLOW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"interface_id": {
									"value": "@variables('IF_ID')",
									"type": "Expression"
								},
								"source_object_schema": {
									"value": "@variables('source_object_schema')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"IF_ID": {
						"type": "String",
						"defaultValue": "IF_SRD_DPS_ERP_0071"
					},
					"source_object_schema": {
						"type": "String",
						"defaultValue": "AR"
					}
				},
				"folder": {
					"name": "2ND PROJECT/1. EAI/ERP/FULL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/1_WORKFLOW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SP_T_DIM_FND_COM_COUNTRY_N_C_Daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RA_TERRITORIES_TL",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RA_TERRITORIES_TL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FND_TERRITORIES_TL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "RA_TERRITORIES_TL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FND_TERRITORIES_TL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Schedule"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/RA_TERRITORIES_TL')]",
				"[concat(variables('factoryId'), '/pipelines/FND_TERRITORIES_TL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SP_T_DIM_FND_COM_COUNTRY_N_C_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "SP_T_DIM_FND_COM_COUNTRY_N_C_Daily",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-08-04T07:43:00",
						"timeZone": "Korea Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SP_T_DIM_FND_COM_COUNTRY_N_C_Daily')]"
			]
		}
	]
}