{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory 이름",
			"defaultValue": "databricks-ls-poc-datafactory"
		},
		"DS_FRW_ADLS_ALL1_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().DLS_FN"
		},
		"DS_FRW_ADLS_ALL1_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().DLS_DR"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DS_FRW_ASQL_ALL1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FRW_ASQL",
					"type": "LinkedServiceReference",
					"parameters": {
						"SRC_SRV_NM": {
							"value": "@dataset().SRC_SRV_NM",
							"type": "Expression"
						},
						"SRC_DB_NM": {
							"value": "@dataset().SRC_DB_NM",
							"type": "Expression"
						},
						"SRC_USER_NM": {
							"value": "@dataset().SRC_USER_NM",
							"type": "Expression"
						},
						"SRC_DB_KVS_NM": {
							"value": "@dataset().SRC_DB_KVS_NM",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SRC_SRV_NM": {
						"type": "string"
					},
					"SRC_DB_NM": {
						"type": "string"
					},
					"SRC_USER_NM": {
						"type": "string"
					},
					"SRC_DB_KVS_NM": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FRW_META_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FRW_ASQL_ALL2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FRW_ASQL",
					"type": "LinkedServiceReference",
					"parameters": {
						"SRC_SRV_NM": {
							"value": "@dataset().SRC_SRV_NM",
							"type": "Expression"
						},
						"SRC_DB_NM": {
							"value": "@dataset().SRC_DB_NM",
							"type": "Expression"
						},
						"SRC_USER_NM": {
							"value": "@dataset().SRC_USER_NM",
							"type": "Expression"
						},
						"SRC_DB_KVS_NM": {
							"value": "@dataset().SRC_DB_KVS_NM",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SRC_SRV_NM": {
						"type": "string"
					},
					"SRC_DB_NM": {
						"type": "string"
					},
					"SRC_USER_NM": {
						"type": "string"
					},
					"SRC_DB_KVS_NM": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FRW_META_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FRW_ASQL_ALL3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FRW_ASQL",
					"type": "LinkedServiceReference",
					"parameters": {
						"SRC_SRV_NM": {
							"value": "@dataset().SRC_SRV_NM",
							"type": "Expression"
						},
						"SRC_DB_NM": {
							"value": "@dataset().SRC_DB_NM",
							"type": "Expression"
						},
						"SRC_USER_NM": {
							"value": "@dataset().SRC_USER_NM",
							"type": "Expression"
						},
						"SRC_DB_KVS_NM": {
							"value": "@dataset().SRC_DB_KVS_NM",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SRC_SRV_NM": {
						"type": "string"
					},
					"SRC_DB_NM": {
						"type": "string"
					},
					"SRC_USER_NM": {
						"type": "string"
					},
					"SRC_DB_KVS_NM": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FRW_META_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FRW_ADLS_ALL1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "databrickslspocsa",
					"type": "LinkedServiceReference",
					"parameters": {}
				},
				"parameters": {
					"SRC_FS_KVS_NM": {
						"type": "string"
					},
					"DLS_DR": {
						"type": "string"
					},
					"DLS_FN": {
						"type": "string"
					},
					"DLS_URL": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADLS GEN2"
				},
				"annotations": [],
				"type": "AzureBlobFSFile",
				"typeProperties": {
					"format": {
						"type": "ParquetFormat"
					},
					"fileName": {
						"value": "[parameters('DS_FRW_ADLS_ALL1_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('DS_FRW_ADLS_ALL1_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_SRC_TO_BRZ_SUB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is used to migrate source table to data lake(RAW) with full copy support. Pipeline is using value of source name and table name in configuration table. ",
				"activities": [
					{
						"name": "GET_CFG",
						"description": "Get migration table information from configuration table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [load_id]\n      ,[source_name]\n      ,[source]\n      ,[interface_id]\n      ,[interface_name]\n      ,[load_type]\n      ,[source_object_schema]\n      ,[source_object]\n      ,[source_field]\n      ,[source_condition]\n      ,[target_object_schema]\n      ,[target_object]\n      ,[target_field]\n      ,[target_condition]\n      ,[from]\n      ,[to]\n      ,[interval_type]\n      ,[r_mig_flg]\n      ,[b_mig_flg]\n      ,[c_mig_flg]\n      ,[usecase_id]\n      ,[src_sys_id]\n      ,[trigger_id]\n      ,[rest_call_url]\n      ,[synapse_object_schema]\n      ,[synapse_object]\n      ,[synapse_object_type]\n      ,NEWID() as ID \n      ,FORMAT(cast(DATEADD(HOUR,9,GETUTCDATE()) as datetime), 'yyyyMMddHHmmss') as 'yyyyMMddHHmmss'\n  FROM [META].[LOAD_INV_EAI]\n  WHERE 1=1\n  AND [r_mig_flg] = 1\n  AND [interface_id] = '@{pipeline().parameters.IF_ID}'\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_DB_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOR_EACH",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GET_DATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_DATE').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "GET_SRC_REC_CNT",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select COUNT(*) AS src_rec_cnt \nfrom @{activity('GET_CFG').output.value[0].source_object_schema}.@{activity('GET_CFG').output.value[0].source_object} \nWHERE 1=1\nAND @{split(activity('GET_CFG').output.value[0].target_field,',')[0]} >= '@{item().FROM_DT}' \nAND @{split(activity('GET_CFG').output.value[0].target_field,',')[1]} < '@{item().TO_DT}' ",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_FRW_ASQL_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().parameters.SRC_DB_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().parameters.SRC_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().parameters.SRC_DB_USR_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().parameters.SRC_DB_KVS_NM",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "COPY_TO_ADLS_LOG",
									"description": "@{concat(pipeline().parameters.DL_DR_NM, '/', activity('GET_CFG').output.value[0].source_name, '/', activity('GET_CFG').output.value[0].source_object, '/', variables('TIME'))}/@{concat(activity('GET_CFG').output.value[0].source_object,'-',item().FROM_DT,'-',item().TO_DT,'.snappy.parquet')}",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_SRC_REC_CNT",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "."
										},
										{
											"name": "Destination",
											"value": "@{concat(pipeline().parameters.DL_DR_NM, '/', activity('GET_CFG').output.value[0].source_name, '/', activity('GET_CFG').output.value[0].source_object, '/', activity('GET_DATE').output.value)}/@{concat(activity('GET_CFG').output.value[0].source_object,'-',item().FROM_DT,'-',item().TO_DT,'.snappy.parquet')}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * \nfrom @{activity('GET_CFG').output.value[0].source_object_schema}.@{activity('GET_CFG').output.value[0].source_object} \nWHERE 1=1\nAND @{split(activity('GET_CFG').output.value[0].target_field,',')[0]} >= '@{item().FROM_DT}' \nAND @{split(activity('GET_CFG').output.value[0].target_field,',')[1]} < '@{item().TO_DT}' ",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_FRW_ASQL_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().parameters.SRC_DB_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().parameters.SRC_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().parameters.SRC_DB_USR_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().parameters.SRC_DB_KVS_NM",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_FS_KVS_NM": {
													"value": "@pipeline().parameters.DL_FS_KVS_NM",
													"type": "Expression"
												},
												"DLS_DR": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{activity('GET_CFG').output.value[0].source_name}/@{activity('GET_CFG').output.value[0].source}/@{activity('GET_CFG').output.value[0].source_object}/@{pipeline().parameters.WIND_STRT_TIME}",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@concat(activity('GET_CFG').output.value[0].source_object,'-',replace(item().FROM_DT,'-',''),'_',replace(item().TO_DT,'-',''),'.snappy.parquet')",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP_INS_RAW_PIP_INFO_LOG",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "COPY_TO_ADLS_LOG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_INS_PIP_INFO",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@{activity('COPY_TO_ADLS_LOG').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_dr_nm": {
												"value": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{activity('GET_CFG').output.value[0].source_name}/@{activity('GET_CFG').output.value[0].source}/@{activity('GET_CFG').output.value[0].source_object}/@{pipeline().parameters.WIND_STRT_TIME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fl_nm": {
												"value": {
													"value": "@concat(activity('GET_CFG').output.value[0].source_object,'_',replace(item().FROM_DT,'-',''),'_',replace(item().TO_DT,'-',''),'.snappy.parquet')",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fs_nm": {
												"value": {
													"value": "@pipeline().parameters.DL_FS_NM",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_rec_cnt": {
												"value": {
													"value": "@activity('COPY_TO_ADLS_LOG').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"end_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"load_id": {
												"value": {
													"value": "@activity('GET_CFG').output.value[0].load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"load_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"mig_clm_nm": {
												"value": "r_mig_flg",
												"type": "String"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().parameters.PIPELINE_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@activity('GET_SRC_REC_CNT').output.firstRow.src_rec_cnt",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start_time": {
												"value": {
													"value": "@pipeline().parameters.WIND_STRT_TIME",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"usecase_id": {
												"value": {
													"value": "@activity('GET_CFG').output.value[0].usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Bronze",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_DB_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "COPY_TO_ADLS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_SRC_REC_CNT",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "."
										},
										{
											"name": "Destination",
											"value": "@{concat(pipeline().parameters.DL_DR_NM, '/', activity('GET_CFG').output.value[0].source_name, '/', activity('GET_CFG').output.value[0].source_object, '/Latest/')}/@{concat(activity('GET_CFG').output.value[0].source_object,'-',item().FROM_DT,'-',item().TO_DT,'.snappy.parquet')}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * \nfrom @{activity('GET_CFG').output.value[0].source_object_schema}.@{activity('GET_CFG').output.value[0].source_object} \nWHERE 1=1\nAND @{split(activity('GET_CFG').output.value[0].target_field,',')[0]} >= '@{item().FROM_DT}' \nAND @{split(activity('GET_CFG').output.value[0].target_field,',')[1]} < '@{item().TO_DT}' ",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_FRW_ASQL_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().parameters.SRC_DB_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().parameters.SRC_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().parameters.SRC_DB_USR_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().parameters.SRC_DB_KVS_NM",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_FS_KVS_NM": {
													"value": "@pipeline().parameters.DL_FS_KVS_NM",
													"type": "Expression"
												},
												"DLS_DR": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{activity('GET_CFG').output.value[0].source_name}/@{activity('GET_CFG').output.value[0].source}/@{activity('GET_CFG').output.value[0].source_object}/Latest/",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@concat(activity('GET_CFG').output.value[0].source_object,'_',replace(item().FROM_DT,'-',''),'_',replace(item().TO_DT,'-',''),'.snappy.parquet')",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP_INS_RAW_PIP_INFO",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "COPY_TO_ADLS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_INS_PIP_INFO",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@{activity('COPY_TO_ADLS').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_dr_nm": {
												"value": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{activity('GET_CFG').output.value[0].source_name}/@{activity('GET_CFG').output.value[0].source}/@{activity('GET_CFG').output.value[0].source_object}/Latest/",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fl_nm": {
												"value": {
													"value": "@concat(activity('GET_CFG').output.value[0].source_object,'_',replace(item().FROM_DT,'-',''),'_',replace(item().TO_DT,'-',''),'.snappy.parquet')",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fs_nm": {
												"value": {
													"value": "@pipeline().parameters.DL_FS_NM",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_rec_cnt": {
												"value": {
													"value": "@activity('COPY_TO_ADLS').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"end_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"load_id": {
												"value": {
													"value": "@activity('GET_CFG').output.value[0].load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"load_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"mig_clm_nm": {
												"value": "r_mig_flg",
												"type": "String"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().parameters.PIPELINE_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@activity('GET_SRC_REC_CNT').output.firstRow.src_rec_cnt",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start_time": {
												"value": {
													"value": "@pipeline().parameters.WIND_STRT_TIME",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"usecase_id": {
												"value": {
													"value": "@activity('GET_CFG').output.value[0].usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Bronze",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_DB_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "LOG",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "COPY_TO_ADLS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('COPY_TO_ADLS').output.executionDetails[0].status,'Succeeded')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "FAIL",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[SP_ETL_DATA_INSERT_LOG]",
													"storedProcedureParameters": {
														"err_mesg": {
															"value": {
																"value": "ErrorCode :@{activity('COPY_TO_ADLS').Error.errorCode}",
																"type": "Expression"
															},
															"type": "String"
														},
														"load_cnt": {
															"value": {
																"value": "@activity('COPY_TO_ADLS').output.rowsRead",
																"type": "Expression"
															},
															"type": "Decimal"
														},
														"parm_from": {
															"value": {
																"value": "@{item().FROM_DT}",
																"type": "Expression"
															},
															"type": "String"
														},
														"parm_to": {
															"value": {
																"value": "@{item().TO_DT}",
																"type": "Expression"
															},
															"type": "String"
														},
														"pgm_status": {
															"value": "E",
															"type": "String"
														},
														"run_pgm": {
															"value": {
																"value": "@concat('BRIDGE','_','SYN','_',activity('GET_CFG').output.value[0].synapse_object_schema,'.',activity('GET_CFG').output.value[0].synapse_object)",
																"type": "Expression"
															},
															"type": "String"
														},
														"st_date": {
															"value": {
																"value": "@formatDateTime(concat(substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,0,4),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,4,2),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,6,2)),'yyyy-MM-dd')",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"tgt_job_area": {
															"value": "ODS",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "syndpdatawarehouse",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SUCCESS",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[SP_ETL_DATA_INSERT_LOG]",
													"storedProcedureParameters": {
														"err_mesg": {
															"value": null,
															"type": "String"
														},
														"load_cnt": {
															"value": {
																"value": "@activity('COPY_TO_ADLS').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Decimal"
														},
														"parm_from": {
															"value": {
																"value": "@{item().FROM_DT}",
																"type": "Expression"
															},
															"type": "String"
														},
														"parm_to": {
															"value": {
																"value": "@{item().TO_DT}",
																"type": "Expression"
															},
															"type": "String"
														},
														"pgm_status": {
															"value": "S",
															"type": "String"
														},
														"run_pgm": {
															"value": {
																"value": "@concat('BRIDGE','_','SYN','_',activity('GET_CFG').output.value[0].synapse_object_schema,'.',activity('GET_CFG').output.value[0].synapse_object)",
																"type": "Expression"
															},
															"type": "String"
														},
														"st_date": {
															"value": {
																"value": "@formatDateTime(concat(substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,0,4),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,4,2),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,6,2)),'yyyy-MM-dd')",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"tgt_job_area": {
															"value": "ODS",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "syndpdatawarehouse",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "GET_DATE",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GET_DATE_RANGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "SELECT DISTINCT \nFORMAT(DATEADD(@{activity('GET_CFG').output.value[0].interval_type}, DATEDIFF(@{activity('GET_CFG').output.value[0].interval_type}, 0, [DATE]), 0),'@{activity('GET_CFG').output.value[0].target_condition}') AS FROM_DT ,\nFORMAT(DATEADD(@{activity('GET_CFG').output.value[0].interval_type}, 1 ,DATEADD(@{activity('GET_CFG').output.value[0].interval_type}, DATEDIFF(@{activity('GET_CFG').output.value[0].interval_type}, 0, [DATE]), 0)),'@{activity('GET_CFG').output.value[0].target_condition}') AS TO_DT\nFROM [dbo].[V_DIM_FND_CALENDAR_DATES_MST]\nWHERE FORMAT([DATE],'@{activity('GET_CFG').output.value[0].target_condition}') BETWEEN '@{activity('GET_DATE_RANGE').output.value[0].MIN_DT}' AND '@{activity('GET_DATE_RANGE').output.value[0].MAX_DT}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ADW_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.LK_SRC_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.LK_SRC_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.LK_SRC_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.LK_SRC_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GET_DATE_RANGE",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nMIN(@{split(activity('GET_CFG').output.value[0].target_field,',')[0]}) AS MIN_DT ,\nMAX(@{split(activity('GET_CFG').output.value[0].target_field,',')[1]}) AS MAX_DT\nFROM [@{activity('GET_CFG').output.value[0].source_object_schema}].[@{activity('GET_CFG').output.value[0].source_object}]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().globalParameters.GP_BRIDGE_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_DB_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().globalParameters.GP_BRIDGE_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"META_DB_SRV_NM": {
						"type": "string",
						"defaultValue": "ls-dp-sql.database.windows.net"
					},
					"META_DB_NM": {
						"type": "string",
						"defaultValue": "sqldb-dataportal"
					},
					"META_DB_USER_NM": {
						"type": "string",
						"defaultValue": "lseadmin"
					},
					"META_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-META-ASQL"
					},
					"DLS_URL": {
						"type": "string",
						"defaultValue": "https://lsdpadls.dfs.core.windows.net/"
					},
					"DL_FS_NM": {
						"type": "string",
						"defaultValue": "lsdpadls"
					},
					"DL_DR_NM": {
						"type": "string",
						"defaultValue": "bronze"
					},
					"DL_FS_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-FS-ADLS"
					},
					"SRC_DB_SRV_NM": {
						"type": "string",
						"defaultValue": "ls-dp-sql.database.windows.net"
					},
					"SRC_DB_NM": {
						"type": "string",
						"defaultValue": "sqldb-bridge"
					},
					"SRC_NM": {
						"type": "string",
						"defaultValue": "ERP-BRIDGE"
					},
					"SRC_DB_USR_NM": {
						"type": "string",
						"defaultValue": "lseadmin"
					},
					"SRC_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-BRIDGE-ASQL"
					},
					"SP_INS_PIP_INFO": {
						"type": "string",
						"defaultValue": "Meta.SP_INS_RAW_PIP_INFO"
					},
					"SP_FAIL_ACT": {
						"type": "string",
						"defaultValue": "Meta.SP_FAIL_ACT"
					},
					"WIND_STRT_TIME": {
						"type": "string"
					},
					"IF_ID": {
						"type": "string"
					},
					"LK_SRC_SRV_NM": {
						"type": "string",
						"defaultValue": "synw-datawarehouse-prod-001.sql.azuresynapse.net"
					},
					"LK_SRC_DB_NM": {
						"type": "string",
						"defaultValue": "syndpdatawarehouse"
					},
					"LK_SRC_USER_NM": {
						"type": "string",
						"defaultValue": "sqladminuser"
					},
					"LK_SRC_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "PROD-KVS-FRW-ADW-SYN"
					},
					"PIPELINE_NAME": {
						"type": "string"
					}
				},
				"variables": {
					"TIME": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/FRAMEWORK"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-07T02:03:24Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/3_BRZ_TO_SIV')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is used to migrate source table to data lake(BASE) with delta copy support. Pipeline is using value of source name and table name in configuration table. ",
				"activities": [
					{
						"name": "GET_CFG",
						"description": "Get migration table information from configuration table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GET_TIME",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAIN.[load_id]\n\t  ,MAIN.[source_name]\n      ,MAIN.[source]\n      ,MAIN.[interface_id]\n      ,MAIN.[interface_name]\n      ,MAIN.[load_type]\n      ,MAIN.[source_object]\n      ,MAIN.[source_field]\n      ,MAIN.[source_condition]\n      ,MAIN.[target_object]\n      ,MAIN.[target_field]\n      ,MAIN.[target_condition]\n      ,MAIN.[from]\n      ,MAIN.[to]\n      ,MAIN.[interval_type]\n      ,MAIN.[r_mig_flg]\n      ,MAIN.[b_mig_flg]\n      ,MAIN.[c_mig_flg]\n      ,MAIN.[usecase_id]\n      ,MAIN.[src_sys_id]\n      ,MAIN.[trigger_id]\n      ,MAIN.[rest_call_url]\n      ,MAIN.[synapse_object]\n      ,MAIN.[synapse_object_type]\n      ,SUB.[pip_nm]\n      ,SUB.[src_rec_cnt]\n      ,SUB.[copy_status]\n      ,SUB.[dl_rec_cnt]\n      ,SUB.[dl_fs_nm]\n      ,SUB.[dl_dr_nm]\n      ,SUB.[dl_fl_nm]\n      ,SUB.[error_msg]\n      ,SUB.[zone_info]\n  FROM [META].[LOAD_INV_EAI] MAIN\n  JOIN (\n  SELECT\n       [usecase_id]\n      ,[load_id]\n      ,[pip_nm]\n      ,[src_rec_cnt]\n      ,[copy_status]\n      ,[dl_rec_cnt]\n      ,[dl_fs_nm]\n      ,[dl_dr_nm]\n      ,[dl_fl_nm]\n      ,[error_msg]\n      ,[zone_info]\n  FROM [META].[LOG_INV]\n  WHERE 1=1\n  --AND [dl_rec_cnt] > 0 \n  AND [copy_status] = 'Succeeded' \n  AND [dl_dr_nm] like '%/Latest/%'\n  AND convert(varchar, [start_time] , 120) = LEFT(REPLACE('@{pipeline().parameters.WIND_STRT_TIME}' , 'T' , ' '),19) ) SUB  \n  ON MAIN.load_id = SUB.load_id\n  WHERE 1=1\n  AND MAIN.[b_mig_flg] = 1\n  AND MAIN.[interface_id] = '@{pipeline().parameters.interface_id}'\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GET_TIME",
						"description": "This activity is used to initialize TIME variable with pipeline start time",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TIME",
							"value": {
								"value": "@replace(replace(pipeline().parameters.WIND_STRT_TIME,':',''),'-','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FOR_EACH",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_CFG').output.value",
								"type": "Expression"
							},
							"batchCount": 3,
							"activities": [
								{
									"name": "GET_JOB_TIME",
									"description": "This activity is used to initialize TIME variable with pipeline start time",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "JOB_TIME",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Trans to Silver",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_JOB_TIME",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureBlobFSSource",
											"recursive": true
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_FS_KVS_NM": {
													"value": "@pipeline().parameters.DL_FS_KVS_NM",
													"type": "Expression"
												},
												"DLS_DR": {
													"value": "@{item().DL_DR_NM}",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@{item().DL_FL_NM}",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_FS_KVS_NM": {
													"value": "@pipeline().parameters.DL_FS_KVS_NM",
													"type": "Expression"
												},
												"DLS_DR": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}/",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@{item().DL_FL_NM}",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP_INS_RAW_PIP_INFO",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Trans to Silver",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_INS_PIP_INFO",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@{activity('Trans to Silver').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_dr_nm": {
												"value": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}/",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fl_nm": {
												"value": {
													"value": "@{item().DL_FL_NM}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fs_nm": {
												"value": {
													"value": "@pipeline().parameters.DL_FS_NM",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_rec_cnt": {
												"value": {
													"value": "@item().SRC_REC_CNT",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"end_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"load_id": {
												"value": {
													"value": "@item().load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"load_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"mig_clm_nm": {
												"value": "b_mig_flg",
												"type": "String"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@item().SRC_REC_CNT",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start_time": {
												"value": {
													"value": "@activity('Trans to Silver').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"usecase_id": {
												"value": {
													"value": "@item().usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Silver",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "SP_FAIL_ACT",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Trans to Silver",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_FAIL_ACT",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@activity('Trans to Silver').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"error_msg": {
												"value": {
													"value": "MERGE and Move to Silver activity has failed, ErrorCode :@{activity('Trans to Silver').Error.errorCode}",
													"type": "Expression"
												},
												"type": "String"
											},
											"load_id": {
												"value": {
													"value": "@item().load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@item().SRC_REC_CNT",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"usecase_id": {
												"value": {
													"value": "@item().usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Silver",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"META_DB_SRV_NM": {
						"type": "string",
						"defaultValue": "ls-dp-sql.database.windows.net"
					},
					"META_DB_NM": {
						"type": "string",
						"defaultValue": "sqldb-dataportal"
					},
					"META_USER_NM": {
						"type": "string",
						"defaultValue": "lseadmin"
					},
					"META_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-META-ASQL"
					},
					"DLS_URL": {
						"type": "string",
						"defaultValue": "https://lsdpadls.dfs.core.windows.net/"
					},
					"DL_FS_NM": {
						"type": "string",
						"defaultValue": "lsdpadls"
					},
					"DL_DR_NM": {
						"type": "string",
						"defaultValue": "silver"
					},
					"DL_FS_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-FS-ADLS"
					},
					"SRC_NM": {
						"type": "string",
						"defaultValue": "BRIDGE"
					},
					"SRC_DL_DR_NM": {
						"type": "string",
						"defaultValue": "bronze"
					},
					"SP_INS_PIP_INFO": {
						"type": "string",
						"defaultValue": "Meta.SP_INS_RAW_PIP_INFO"
					},
					"SP_FAIL_ACT": {
						"type": "string",
						"defaultValue": "Meta.SP_FAIL_ACT"
					},
					"WIND_STRT_TIME": {
						"type": "string"
					},
					"PIPELINE_NAME": {
						"type": "string"
					},
					"interface_id": {
						"type": "string"
					}
				},
				"variables": {
					"TIME": {
						"type": "String"
					},
					"JOB_TIME": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/FRAMEWORK"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-06T01:00:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/4_SIL_TO_GOL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is used to migrate source table to data lake(Curated) with full copy support. Pipeline is using value of source name and table name in configuration table. ",
				"activities": [
					{
						"name": "GET_CFG",
						"description": "Get migration table information from configuration table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GET_TIME",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT   MAIN.[load_id]\n        ,MAIN.[source_name]\n        ,MAIN.[source]\n        ,MAIN.[interface_id]\n        ,MAIN.[interface_name]\n        ,MAIN.[load_type]\n        ,MAIN.[source_object]\n        ,MAIN.[source_field]\n        ,MAIN.[source_condition]\n        ,MAIN.[target_object]\n        ,MAIN.[target_field]\n        ,MAIN.[target_condition]\n        ,MAIN.[from]\n        ,MAIN.[to]\n        ,MAIN.[interval_type]\n        ,MAIN.[r_mig_flg]\n        ,MAIN.[b_mig_flg]\n        ,MAIN.[c_mig_flg]\n        ,MAIN.[usecase_id]\n        ,MAIN.[src_sys_id]\n        ,MAIN.[trigger_id]\n        ,MAIN.[rest_call_url]\n        ,MAIN.[synapse_object]\n        ,MAIN.[synapse_object_type]\n        ,SUB.[pip_nm]\n        ,SUB.[src_rec_cnt]\n        ,SUB.[copy_status]\n        ,SUB.[dl_rec_cnt]\n        ,SUB.[dl_fs_nm]\n        ,SUB.[dl_dr_nm]\n        ,SUB.[dl_fl_nm]\n        ,SUB.[error_msg]\n        ,SUB.[zone_info]\n  FROM [META].[LOAD_INV_EAI] MAIN\n  JOIN (\n  SELECT\n       [usecase_id]\n      ,[load_id]\n      ,[pip_nm]\n      ,[src_rec_cnt]\n      ,[copy_status]\n      ,[dl_rec_cnt]\n      ,[dl_fs_nm]\n      ,[dl_dr_nm]\n      ,[dl_fl_nm]\n      ,[error_msg]\n      ,[zone_info]\n  FROM [META].[LOG_INV]\n  WHERE 1=1\n  --AND [dl_rec_cnt] > 0 \n  AND [copy_status] = 'Succeeded' \n  AND [dl_dr_nm] like '%/Latest/%'\n  AND convert(varchar, [start_time] , 120) = LEFT(REPLACE('@{pipeline().parameters.WIND_STRT_TIME}' , 'T' , ' '),19) ) SUB  \n  ON MAIN.load_id = SUB.load_id\n  WHERE 1=1\n  AND MAIN.[C_mig_flg] = 1\n  AND MAIN.[interface_id] = '@{pipeline().parameters.interface_id}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOR_EACH",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_CFG').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "GET_JOB_TIME",
									"description": "This activity is used to initialize TIME variable with pipeline start time",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "JOB_TIME",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Trans to GOLD",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_JOB_TIME",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureBlobFSSource",
											"recursive": true
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_FS_KVS_NM": {
													"value": "@pipeline().parameters.DL_FS_KVS_NM",
													"type": "Expression"
												},
												"DLS_DR": {
													"value": "@{pipeline().parameters.SRC_DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}/",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@{item().DL_FL_NM}",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_FS_KVS_NM": {
													"value": "@pipeline().parameters.DL_FS_KVS_NM",
													"type": "Expression"
												},
												"DLS_DR": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}/",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@{item().DL_FL_NM}",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP_INS_RAW_PIP_INFO",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Trans to GOLD",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_INS_PIP_INFO",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@{activity('Trans to GOLD').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_dr_nm": {
												"value": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}/",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fl_nm": {
												"value": {
													"value": "@{item().DL_FL_NM}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fs_nm": {
												"value": {
													"value": "@pipeline().parameters.DL_FS_NM",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_rec_cnt": {
												"value": {
													"value": "@item().src_rec_cnt",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"end_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"load_id": {
												"value": {
													"value": "@item().load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"load_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"mig_clm_nm": {
												"value": "c_mig_flg",
												"type": "String"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@item().SRC_REC_CNT",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start_time": {
												"value": {
													"value": "@activity('Trans to GOLD').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"usecase_id": {
												"value": {
													"value": "@item().usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Gold",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "SP_FAIL_ACT",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Trans to GOLD",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_FAIL_ACT",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@activity('Trans to GOLD').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"error_msg": {
												"value": {
													"value": "Trans to GOLD activity has failed, ErrorCode :@{activity('Trans to GOLD').Error.errorCode}",
													"type": "Expression"
												},
												"type": "String"
											},
											"load_id": {
												"value": {
													"value": "@item().load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@item().SRC_REC_CNT",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"usecase_id": {
												"value": {
													"value": "@item().usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Gold",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "GET_TIME",
						"description": "This activity is used to initialize TIME variable with pipeline start time",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TIME",
							"value": {
								"value": "@replace(replace(pipeline().parameters.WIND_STRT_TIME,':',''),'-','')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"META_DB_SRV_NM": {
						"type": "string",
						"defaultValue": "ls-dp-sql.database.windows.net"
					},
					"META_DB_NM": {
						"type": "string",
						"defaultValue": "sqldb-dataportal"
					},
					"META_USER_NM": {
						"type": "string",
						"defaultValue": "lseadmin"
					},
					"META_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-META-ASQL"
					},
					"DLS_URL": {
						"type": "string",
						"defaultValue": "https://lsdpadls.dfs.core.windows.net/"
					},
					"DL_FS_NM": {
						"type": "string",
						"defaultValue": "lsdpadls"
					},
					"DL_DR_NM": {
						"type": "string",
						"defaultValue": "gold"
					},
					"DL_FS_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-FS-ADLS"
					},
					"SRC_NM": {
						"type": "string",
						"defaultValue": "BRIDGE"
					},
					"SRC_DL_DR_NM": {
						"type": "string",
						"defaultValue": "silver"
					},
					"SP_INS_PIP_INFO": {
						"type": "string",
						"defaultValue": "Meta.SP_INS_RAW_PIP_INFO"
					},
					"SP_FAIL_ACT": {
						"type": "string",
						"defaultValue": "Meta.SP_FAIL_ACT"
					},
					"SP_UPD_MIG_FLG_INFO": {
						"type": "string",
						"defaultValue": "Meta.SP_DB_UPD_MIG_FLG_INFO"
					},
					"WIND_STRT_TIME": {
						"type": "string"
					},
					"PIPELINE_NAME": {
						"type": "string"
					},
					"interface_id": {
						"type": "string"
					}
				},
				"variables": {
					"TIME": {
						"type": "String"
					},
					"JOB_TIME": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/FRAMEWORK"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-06T01:00:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/COPY_TO_SYNAPSE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GET_CFG",
						"description": "Get migration table information from configuration table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [load_id]\n      ,[source_name]\n      ,[source]\n      ,[interface_id]\n      ,[interface_name]\n      ,[load_type]\n      ,[source_object_schema]\n      ,[source_object]\n      ,[source_field]\n      ,[source_condition]\n      ,[target_object_schema]\n      ,[target_object]\n      ,[target_field]\n      ,[target_condition]\n      ,[from]\n      ,[to]\n      ,[interval_type]\n      ,[r_mig_flg]\n      ,[b_mig_flg]\n      ,[c_mig_flg]\n      ,[usecase_id]\n      ,[src_sys_id]\n      ,[trigger_id]\n      ,[rest_call_url]\n      ,[synapse_object_schema]\n      ,[synapse_object]\n      ,[synapse_object_type]\n      ,NEWID() as ID \n      ,FORMAT(cast(DATEADD(HOUR,9,GETUTCDATE()) as datetime), 'yyyyMMddHHmmss') as 'yyyyMMddHHmmss'\n  FROM [META].[LOAD_INV_EAI]\n  WHERE 1=1\n  AND [r_mig_flg] = 1\n  AND [interface_id] = '@{pipeline().parameters.IF_ID}'\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_DB_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GET_DATE_RANGE",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nMIN(@{split(activity('GET_CFG').output.value[0].target_field,',')[0]}) AS MIN_DT ,\nMAX(@{split(activity('GET_CFG').output.value[0].target_field,',')[1]}) AS MAX_DT\nFROM [@{activity('GET_CFG').output.value[0].source_object_schema}].[@{activity('GET_CFG').output.value[0].source_object}]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().globalParameters.GP_BRIDGE_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_DB_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().globalParameters.GP_BRIDGE_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GET_SRC_REC_CNT",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GET_DATE_RANGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select COUNT(*) AS src_rec_cnt \nfrom @{activity('GET_CFG').output.value[0].source_object_schema}.@{activity('GET_CFG').output.value[0].source_object} ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.SRC_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.SRC_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.SRC_DB_USR_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.SRC_DB_KVS_NM",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "COPY_TO_SYNAPSE",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GET_SRC_REC_CNT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from @{activity('GET_CFG').output.value[0].source_object_schema}.@{activity('GET_CFG').output.value[0].source_object}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": {
									"value": "IF OBJECT_ID('@{activity('GET_CFG').output.value[0].synapse_object_schema}.@{activity('GET_CFG').output.value[0].synapse_object}', 'U') IS NOT NULL\nDELETE FROM @{activity('GET_CFG').output.value[0].synapse_object_schema}.@{activity('GET_CFG').output.value[0].synapse_object} \nWHERE 1=1\nAND @{split(activity('GET_CFG').output.value[0].target_field,',')[0]} >= '@{activity('GET_DATE_RANGE').output.value[0].MIN_DT}'\nAND @{split(activity('GET_CFG').output.value[0].target_field,',')[1]} <= '@{activity('GET_DATE_RANGE').output.value[0].MAX_DT}'",
									"type": "Expression"
								},
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_FRW_ASQL_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.SRC_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.SRC_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.SRC_DB_USR_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.SRC_DB_KVS_NM",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_FRW_ADW_TBL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.LK_SRC_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.LK_SRC_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.LK_SRC_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.LK_SRC_DB_KVS_NM",
										"type": "Expression"
									},
									"SCHEMA_NM": {
										"value": "@{activity('GET_CFG').output.value[0].synapse_object_schema}",
										"type": "Expression"
									},
									"TABLE_NM": {
										"value": "@{activity('GET_CFG').output.value[0].synapse_object}",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LOG",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "COPY_TO_SYNAPSE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('COPY_TO_SYNAPSE').output.executionDetails[0].status,'Succeeded')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FAIL",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[SP_ETL_DATA_INSERT_LOG]",
										"storedProcedureParameters": {
											"err_mesg": {
												"value": {
													"value": "@activity('COPY_TO_SYNAPSE').output.errors[0].Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"load_cnt": {
												"value": {
													"value": "@activity('COPY_TO_SYNAPSE').output.rowsRead",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"parm_from": {
												"value": null,
												"type": "String"
											},
											"parm_to": {
												"value": null,
												"type": "String"
											},
											"pgm_status": {
												"value": "E",
												"type": "String"
											},
											"run_pgm": {
												"value": {
													"value": "@concat('BRIDGE','_','SYN','_',activity('GET_CFG').output.value[0].synapse_object_schema,'.',activity('GET_CFG').output.value[0].synapse_object)",
													"type": "Expression"
												},
												"type": "String"
											},
											"st_date": {
												"value": {
													"value": "@formatDateTime(concat(substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,0,4),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,4,2),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,6,2)),'yyyy-MM-dd')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"tgt_job_area": {
												"value": "ODS",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "syndpdatawarehouse",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SUCCESS",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[SP_ETL_DATA_INSERT_LOG]",
										"storedProcedureParameters": {
											"err_mesg": {
												"value": null,
												"type": "String"
											},
											"load_cnt": {
												"value": {
													"value": "@activity('COPY_TO_SYNAPSE').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"parm_from": {
												"value": null,
												"type": "String"
											},
											"parm_to": {
												"value": null,
												"type": "String"
											},
											"pgm_status": {
												"value": "S",
												"type": "String"
											},
											"run_pgm": {
												"value": {
													"value": "@concat('BRIDGE','_','SYN','_',activity('GET_CFG').output.value[0].synapse_object_schema,'.',activity('GET_CFG').output.value[0].synapse_object)",
													"type": "Expression"
												},
												"type": "String"
											},
											"st_date": {
												"value": {
													"value": "@formatDateTime(concat(substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,0,4),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,4,2),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,6,2)),'yyyy-MM-dd')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"tgt_job_area": {
												"value": "ODS",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "syndpdatawarehouse",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"IF_ID": {
						"type": "string"
					},
					"META_DB_SRV_NM": {
						"type": "string",
						"defaultValue": "ls-dp-sql.database.windows.net"
					},
					"META_DB_NM": {
						"type": "string",
						"defaultValue": "sqldb-dataportal"
					},
					"META_DB_USER_NM": {
						"type": "string",
						"defaultValue": "lseadmin"
					},
					"META_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-META-ASQL"
					},
					"DLS_URL": {
						"type": "string",
						"defaultValue": "https://lsdpadls.dfs.core.windows.net/"
					},
					"DL_FS_NM": {
						"type": "string",
						"defaultValue": "lsdpadls"
					},
					"DL_DR_NM": {
						"type": "string",
						"defaultValue": "bronze"
					},
					"DL_FS_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-FS-ADLS"
					},
					"SRC_DB_SRV_NM": {
						"type": "string",
						"defaultValue": "ls-dp-sql.database.windows.net"
					},
					"SRC_DB_NM": {
						"type": "string",
						"defaultValue": "sqldb-bridge"
					},
					"SRC_NM": {
						"type": "string",
						"defaultValue": "ERP-BRIDGE"
					},
					"SRC_DB_USR_NM": {
						"type": "string",
						"defaultValue": "lseadmin"
					},
					"SRC_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-BRIDGE-ASQL"
					},
					"SP_INS_PIP_INFO": {
						"type": "string",
						"defaultValue": "Meta.SP_INS_RAW_PIP_INFO"
					},
					"SP_FAIL_ACT": {
						"type": "string",
						"defaultValue": "Meta.SP_FAIL_ACT"
					},
					"LK_SRC_SRV_NM": {
						"type": "string",
						"defaultValue": "synw-datawarehouse-prod-001.sql.azuresynapse.net"
					},
					"LK_SRC_DB_NM": {
						"type": "string",
						"defaultValue": "syndpdatawarehouse"
					},
					"LK_SRC_USER_NM": {
						"type": "string",
						"defaultValue": "sqladminuser"
					},
					"LK_SRC_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "PROD-KVS-FRW-ADW-SYN"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/BRIDGE TO SYNAPSE"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-20T01:08:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EAI_COMPLETED')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UNTIL",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(activity('GET_EAI_REST_LOG').output.count,1)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GET_EAI_REST_LOG",
									"description": "Get migration table information from configuration table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT *\n  FROM [META].[EAI_REST_LOG]\n  WHERE 1=1\n  AND [IF_DATETIME] = '@{pipeline().parameters.IF_DATETIME}'\n  AND [IF_ID] = '@{pipeline().parameters.IF_ID}'",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_FRW_ASQL_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().globalParameters.GP_META_DB_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().globalParameters.GP_BRIDGE_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().globalParameters.GP_META_USER_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().globalParameters.GP_BRIDGE_DB_KVS_NM",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "WAIT",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "GET_EAI_REST_LOG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 3
									}
								}
							],
							"timeout": "2:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"IF_ID": {
						"type": "string"
					},
					"IF_DATETIME": {
						"type": "string"
					}
				},
				"variables": {
					"X": {
						"type": "String"
					},
					"TMP_X": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/RESTCALL"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T09:13:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ERP_ECST_ITEM_TXN_HIST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "SELECT    YYYYMM\n     ,    ORGANIZATION_ID\n     ,    SUBINVENTORY_CODE\n     ,    INVENTORY_ITEM_ID\n     ,    PROJECT_ID\n     ,    TASK_ID\n     ,    LAST_YEAR_QTY_ONHAND\n     ,    LAST_YEAR_AMT_ONHAND\n     ,    BEF_QTY_ONHAND\n     ,    QTY_PO_RECEIPT\n     ,    QTY_WIP_RECEIPT\n     ,    QTY_OTHER_RECEIPT\n     ,    QTY_WIP_ISSUE\n     ,    QTY_SALES_ISSUE\n     ,    QTY_OTHER_ISSUE\n     ,    QTY_ONHAND\n     ,    BEF_AMT_M_ONHAND\n     ,    BEF_AMT_MOVH_ONHAND\n     ,    BEF_AMT_RSC_ONHAND\n     ,    BEF_AMT_OSP_ONHAND\n     ,    BEF_AMT_OVH_ONHAND\n     ,    BEF_AMT_ONHAND\n     ,    AMT_PO_M_RECEIPT\n     ,    AMT_PO_MOVH_RECEIPT\n     ,    AMT_PO_RSC_RECEIPT\n     ,    AMT_PO_OSP_RECEIPT\n     ,    AMT_PO_OVH_RECEIPT\n     ,    AMT_PO_RECEIPT\n     ,    AMT_WIP_M_RECEIPT\n     ,    AMT_WIP_MOVH_RECEIPT\n     ,    AMT_WIP_RSC_RECEIPT\n     ,    AMT_WIP_OSP_RECEIPT\n     ,    AMT_WIP_OVH_RECEIPT\n     ,    AMT_WIP_RECEIPT\n     ,    AMT_OTHER_M_RECEIPT\n     ,    AMT_OTHER_MOVH_RECEIPT\n     ,    AMT_OTHER_RSC_RECEIPT\n     ,    AMT_OTHER_OSP_RECEIPT\n     ,    AMT_OTHER_OVH_RECEIPT\n     ,    AMT_OTHER_RECEIPT\n     ,    AMT_WIP_M_ISSUE\n     ,    AMT_WIP_MOVH_ISSUE\n     ,    AMT_WIP_RSC_ISSUE\n     ,    AMT_WIP_OSP_ISSUE\n     ,    AMT_WIP_OVH_ISSUE\n     ,    AMT_WIP_ISSUE\n     ,    AMT_SALES_M_ISSUE\n     ,    AMT_SALES_MOVH_ISSUE\n     ,    AMT_SALES_RSC_ISSUE\n     ,    AMT_SALES_OSP_ISSUE\n     ,    AMT_SALES_OVH_ISSUE\n     ,    AMT_SALES_ISSUE\n     ,    AMT_OTHER_M_ISSUE\n     ,    AMT_OTHER_MOVH_ISSUE\n     ,    AMT_OTHER_RSC_ISSUE\n     ,    AMT_OTHER_OSP_ISSUE\n     ,    AMT_OTHER_OVH_ISSUE\n     ,    AMT_OTHER_ISSUE\n     ,    AMT_M_ONHAND\n     ,    AMT_MOVH_ONHAND\n     ,    AMT_RSC_ONHAND\n     ,    AMT_OSP_ONHAND\n     ,    AMT_OVH_ONHAND\n     ,    AMT_ONHAND\n     ,    CORRECT_FLAG\n     ,    CORRECT_AMT\n     ,    CORRECT_DESC\n     ,    LAST_RECEIPT_DATE\n     ,    LAST_RECEIPT_DATE_ON\n     ,    LAST_ISSUE_DATE\n     ,    LAST_ISSUE_DATE_ON\n     ,    ITEM_LAST_RECEIPT_DATE\n     ,    ITEM_LAST_RECEIPT_DATE_ON\n     ,    ITEM_LAST_ISSUE_DATE\n     ,    ITEM_LAST_ISSUE_DATE_ON\n     ,    ATTRIBUTE1\n     ,    ATTRIBUTE2\n     ,    ATTRIBUTE3\n     ,    ATTRIBUTE4\n     ,    ATTRIBUTE5\n     ,    LAST_UPDATE_DATE\n     ,    LAST_UPDATED_BY\n     ,    CREATION_DATE\n     ,    CREATED_BY\n     ,    QTY_SUBTRANS_RECEIPT\n     ,    QTY_SUBTRANS_ISSUE\n     ,    AMT_SUBTRANS_M_RECEIPT\n     ,    AMT_SUBTRANS_MOVH_RECEIPT\n     ,    AMT_SUBTRANS_RSC_RECEIPT\n     ,    AMT_SUBTRANS_OSP_RECEIPT\n     ,    AMT_SUBTRANS_OVH_RECEIPT\n     ,    AMT_SUBTRANS_RECEIPT\n     ,    AMT_SUBTRANS_M_ISSUE\n     ,    AMT_SUBTRANS_MOVH_ISSUE\n     ,    AMT_SUBTRANS_RSC_ISSUE\n     ,    AMT_SUBTRANS_OSP_ISSUE\n     ,    AMT_SUBTRANS_OVH_ISSUE\n     ,    AMT_SUBTRANS_ISSUE\n     ,    'Y' IF_RESULT\n     ,    NULL IF_TRC_ID\n     ,    SYSDATE IF_DATE\n  FROM    ECST_ITEM_TXN_HISTORIES\n WHERE    YYYYMM >= TO_CHAR(TRUNC(SYSDATE-1),'YYYYMM')-1\n   AND    ORGANIZATION_ID IN (102\n,103\n,104\n,105\n,111\n,121\n,321\n,541\n,542\n,564\n)",
									"type": "Expression"
								},
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "DELETE [ERPSYS].[ERP_ECST_ITEM_TXN_HIST] WHERE YYYYMM >= CONVERT(NVARCHAR(6),DATEADD(MONTH,-1,GETDATE()),112)",
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "databrickslspocsa",
									"type": "LinkedServiceReference"
								},
								"path": "synapse-fs"
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FRW_ORACLE_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.SRC_SRV_NM",
										"type": "Expression"
									},
									"SRC_PORT_NM": {
										"value": "@pipeline().parameters.SRC_PORT_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.SRC_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.SRC_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.SRC_DB_KVS_NM",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_FRW_ADW_TBL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.DST_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.DST_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.DST_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.DST_DB_KVS_NM",
										"type": "Expression"
									},
									"SCHEMA_NM": "ERPSYS",
									"TABLE_NM": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SRC_SRV_NM": {
						"type": "string",
						"defaultValue": "165.244.241.132"
					},
					"SRC_PORT_NM": {
						"type": "string",
						"defaultValue": "1601"
					},
					"SRC_DB_NM": {
						"type": "string",
						"defaultValue": "ERPPROD"
					},
					"SRC_USER_NM": {
						"type": "string",
						"defaultValue": "LSISDATALAKE"
					},
					"SRC_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "PROD-KVS-FRW-ERP-ORACLE"
					},
					"DST_SRV_NM": {
						"type": "string",
						"defaultValue": "synw-datawarehouse-prod-001.sql.azuresynapse.net"
					},
					"DST_DB_NM": {
						"type": "string",
						"defaultValue": "syndpdatawarehouse"
					},
					"DST_USER_NM": {
						"type": "string",
						"defaultValue": "sqladminuser"
					},
					"DST_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "PROD-KVS-FRW-ADW-SYN"
					}
				},
				"folder": {
					"name": "2ND PROJECT/2. NONE EAI/1. ORACLE"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-04T06:05:22Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Origin_PL_COPY_FS_to_BLOB_v4_PC2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy local to source",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "테스트/"
							},
							{
								"name": "Destination",
								"value": "temp-monitoring/source/source.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@addminutes(utcnow(), -2)",
										"type": "Expression"
									},
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 28
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ""
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "No.",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									},
									{
										"source": {
											"name": " Date&Time",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										}
									},
									{
										"source": {
											"name": " ms",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										}
									},
									{
										"source": {
											"name": "CH1",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										}
									},
									{
										"source": {
											"name": "CH2",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										}
									},
									{
										"source": {
											"name": "CH3",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										}
									},
									{
										"source": {
											"name": "CH4",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										}
									},
									{
										"source": {
											"name": "CH5",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										}
									},
									{
										"source": {
											"name": "CH6",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 9
										}
									},
									{
										"source": {
											"name": "CH7",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 10
										}
									},
									{
										"source": {
											"name": "CH8",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 11
										}
									},
									{
										"source": {
											"name": "CH9",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 12
										}
									},
									{
										"source": {
											"name": "CH10",
											"type": "Decimal",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 13
										}
									},
									{
										"source": {
											"name": "Alarm1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 14
										}
									},
									{
										"source": {
											"name": "Alarm2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 15
										}
									},
									{
										"source": {
											"name": "AlarmOut",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 16
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false,
									"dateTimeFormat": "yyyy-MM-dd HH:mm:ss"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SRC_NAS_FS2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_BLOB_source_PC2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "If rowsCopied is greater than 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Copy local to source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Copy local to source').output.rowsCopied, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy local to input",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings",
												"skipLineCount": {
													"value": "@add(int(activity('Copy local to source').output.rowsRead),-7)",
													"type": "Expression"
												}
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": {
													"value": "@concat(convertTimeZone(utcnow(), 'Korea Standard Time', 'Korea Standard Time', '/yyyy-MM-dd/HH:mm:dd'),'.csv')",
													"type": "Expression"
												}
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"type": "String",
														"ordinal": 1
													},
													"sink": {
														"name": "No.",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "DateTime",
														"ordinal": 2
													},
													"sink": {
														"name": "Date&Time",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 3
													},
													"sink": {
														"name": "ms",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 4
													},
													"sink": {
														"name": "CH1",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 5
													},
													"sink": {
														"name": "CH2",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 6
													},
													"sink": {
														"name": "CH3",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 7
													},
													"sink": {
														"name": "CH4",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 8
													},
													"sink": {
														"name": "CH5",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 9
													},
													"sink": {
														"name": "CH6",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 10
													},
													"sink": {
														"name": "CH7",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 11
													},
													"sink": {
														"name": "CH8",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 12
													},
													"sink": {
														"name": "CH9",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 13
													},
													"sink": {
														"name": "CH10",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 14
													},
													"sink": {
														"name": "Alarm1",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 15
													},
													"sink": {
														"name": "Alarm2",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 16
													},
													"sink": {
														"name": "AlarmOut",
														"physicalType": "String"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_BLOB_source_PC2",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_BLOB_input_PC2",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy local to output",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy local to input",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings",
												"skipLineCount": 28
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"type": "String",
														"ordinal": 1
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 1
													}
												},
												{
													"source": {
														"type": "DateTime",
														"ordinal": 2
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 2
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 3
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 3
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 4
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 4
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 5
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 5
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 6
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 6
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 7
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 7
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 8
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 8
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 9
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 9
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 10
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 10
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 11
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 11
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 12
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 12
													}
												},
												{
													"source": {
														"type": "Decimal",
														"ordinal": 13
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 13
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 14
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 14
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 15
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 15
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 16
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 16
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_BLOB_source_PC2",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_BLOB_ouput_PC2",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "99. TEMP/TEMP_MONITORING"
				},
				"annotations": [],
				"lastPublishTime": "2025-02-06T00:50:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SP_COMPLETED')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UNTIL",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(activity('SP_COMPLETED').output.count,1)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SP_COMPLETED",
									"description": "Get migration table information from configuration table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "IF ('@{pipeline().parameters.PARM_FROM}' <> 'NULL')\nBEGIN\n    SELECT *\n    FROM [dbo].[ETL_DATA_INSERT_LOG]\n    where 1=1\n    and FORMAT([START_DATE] , 'yyyyMMddHHmmss') >= '@{pipeline().parameters.START_DATE}'\n    and [RUN_PGM] = '@{pipeline().parameters.RUN_PGM}'\n    and [PARM_FROM] = '@{pipeline().parameters.PARM_FROM}'\n    and [PARM_TO] = '@{pipeline().parameters.PARM_TO}'\nEND\nIF ('@{pipeline().parameters.PARM_FROM}' = 'NULL')\nBEGIN\n    SELECT *\n    FROM [dbo].[ETL_DATA_INSERT_LOG]\n    where 1=1\n    and FORMAT([START_DATE] , 'yyyyMMddHHmmss') >= '@{pipeline().parameters.START_DATE}'\n    and [RUN_PGM] = '@{pipeline().parameters.RUN_PGM}'\nEND",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_FRW_ASQL_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_USER_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_DB_KVS_NM",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "WAIT",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "SP_COMPLETED",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 5
									}
								}
							],
							"timeout": "1:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"RUN_PGM": {
						"type": "string"
					},
					"START_DATE": {
						"type": "string"
					},
					"PARM_FROM": {
						"type": "string"
					},
					"PARM_TO": {
						"type": "string"
					}
				},
				"variables": {
					"X": {
						"type": "String"
					},
					"TMP_X": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/STOREDPROCEDURE"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-10T07:14:56Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SP_COMPLETED1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UNTIL",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(activity('SP_COMPLETED').output.count,1)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SP_COMPLETED",
									"description": "Get migration table information from configuration table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "IF ('@{pipeline().parameters.PARM_FROM}' <> 'NULL')\nBEGIN\n    SELECT *\n    FROM [dbo].[ETL_DATA_INSERT_LOG]\n    where 1=1\n    and FORMAT([START_DATE] , 'yyyyMMddHHmmss') >= '@{pipeline().parameters.START_DATE}'\n    and [RUN_PGM] = '@{pipeline().parameters.RUN_PGM}'\n    and [PARM_FROM] = '@{pipeline().parameters.PARM_FROM}'\n    and [PARM_TO] = '@{pipeline().parameters.PARM_TO}'\nEND\nIF ('@{pipeline().parameters.PARM_FROM}' = 'NULL')\nBEGIN\n    SELECT *\n    FROM [dbo].[ETL_DATA_INSERT_LOG]\n    where 1=1\n    and FORMAT([START_DATE] , 'yyyyMMddHHmmss') >= '@{pipeline().parameters.START_DATE}'\n    and [RUN_PGM] = '@{pipeline().parameters.RUN_PGM}'\nEND",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_FRW_ASQL_ALL1",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_USER_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_DB_KVS_NM",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "WAIT",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "SP_COMPLETED",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 5
									}
								}
							],
							"timeout": "1:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"RUN_PGM": {
						"type": "string"
					},
					"START_DATE": {
						"type": "string"
					},
					"PARM_FROM": {
						"type": "string"
					},
					"PARM_TO": {
						"type": "string"
					}
				},
				"variables": {
					"X": {
						"type": "String"
					},
					"TMP_X": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/STOREDPROCEDURE"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-10T07:14:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FRW_ASQL_ALL1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SP_COMPLETED2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UNTIL",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(activity('SP_COMPLETED').output.count,1)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SP_COMPLETED",
									"description": "Get migration table information from configuration table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "IF ('@{pipeline().parameters.PARM_FROM}' <> 'NULL')\nBEGIN\n    SELECT *\n    FROM [dbo].[ETL_DATA_INSERT_LOG]\n    where 1=1\n    and FORMAT([START_DATE] , 'yyyyMMddHHmmss') >= '@{pipeline().parameters.START_DATE}'\n    and [RUN_PGM] = '@{pipeline().parameters.RUN_PGM}'\n    and [PARM_FROM] = '@{pipeline().parameters.PARM_FROM}'\n    and [PARM_TO] = '@{pipeline().parameters.PARM_TO}'\nEND\nIF ('@{pipeline().parameters.PARM_FROM}' = 'NULL')\nBEGIN\n    SELECT *\n    FROM [dbo].[ETL_DATA_INSERT_LOG]\n    where 1=1\n    and FORMAT([START_DATE] , 'yyyyMMddHHmmss') >= '@{pipeline().parameters.START_DATE}'\n    and [RUN_PGM] = '@{pipeline().parameters.RUN_PGM}'\nEND",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_FRW_ASQL_ALL2",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_USER_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_DB_KVS_NM",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "WAIT",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "SP_COMPLETED",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 5
									}
								}
							],
							"timeout": "1:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"RUN_PGM": {
						"type": "string"
					},
					"START_DATE": {
						"type": "string"
					},
					"PARM_FROM": {
						"type": "string"
					},
					"PARM_TO": {
						"type": "string"
					}
				},
				"variables": {
					"X": {
						"type": "String"
					},
					"TMP_X": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/STOREDPROCEDURE"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-10T07:14:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FRW_ASQL_ALL2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EAI_COMPLETED1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UNTIL",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(activity('GET_EAI_REST_LOG').output.count,1)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GET_EAI_REST_LOG",
									"description": "Get migration table information from configuration table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT *\n  FROM [META].[EAI_REST_LOG]\n  WHERE 1=1\n  AND [IF_DATETIME] = '@{pipeline().parameters.IF_DATETIME}'\n  AND [IF_ID] = '@{pipeline().parameters.IF_ID}'",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_FRW_ASQL_ALL3",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().globalParameters.GP_META_DB_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().globalParameters.GP_BRIDGE_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().globalParameters.GP_META_USER_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().globalParameters.GP_BRIDGE_DB_KVS_NM",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "WAIT",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "GET_EAI_REST_LOG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 3
									}
								}
							],
							"timeout": "2:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"IF_ID": {
						"type": "string"
					},
					"IF_DATETIME": {
						"type": "string"
					}
				},
				"variables": {
					"X": {
						"type": "String"
					},
					"TMP_X": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/RESTCALL"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T09:13:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FRW_ASQL_ALL3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3_BRZ_TO_SIV1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is used to migrate source table to data lake(BASE) with delta copy support. Pipeline is using value of source name and table name in configuration table. ",
				"activities": [
					{
						"name": "GET_CFG",
						"description": "Get migration table information from configuration table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GET_TIME",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAIN.[load_id]\n\t  ,MAIN.[source_name]\n      ,MAIN.[source]\n      ,MAIN.[interface_id]\n      ,MAIN.[interface_name]\n      ,MAIN.[load_type]\n      ,MAIN.[source_object]\n      ,MAIN.[source_field]\n      ,MAIN.[source_condition]\n      ,MAIN.[target_object]\n      ,MAIN.[target_field]\n      ,MAIN.[target_condition]\n      ,MAIN.[from]\n      ,MAIN.[to]\n      ,MAIN.[interval_type]\n      ,MAIN.[r_mig_flg]\n      ,MAIN.[b_mig_flg]\n      ,MAIN.[c_mig_flg]\n      ,MAIN.[usecase_id]\n      ,MAIN.[src_sys_id]\n      ,MAIN.[trigger_id]\n      ,MAIN.[rest_call_url]\n      ,MAIN.[synapse_object]\n      ,MAIN.[synapse_object_type]\n      ,SUB.[pip_nm]\n      ,SUB.[src_rec_cnt]\n      ,SUB.[copy_status]\n      ,SUB.[dl_rec_cnt]\n      ,SUB.[dl_fs_nm]\n      ,SUB.[dl_dr_nm]\n      ,SUB.[dl_fl_nm]\n      ,SUB.[error_msg]\n      ,SUB.[zone_info]\n  FROM [META].[LOAD_INV_EAI] MAIN\n  JOIN (\n  SELECT\n       [usecase_id]\n      ,[load_id]\n      ,[pip_nm]\n      ,[src_rec_cnt]\n      ,[copy_status]\n      ,[dl_rec_cnt]\n      ,[dl_fs_nm]\n      ,[dl_dr_nm]\n      ,[dl_fl_nm]\n      ,[error_msg]\n      ,[zone_info]\n  FROM [META].[LOG_INV]\n  WHERE 1=1\n  --AND [dl_rec_cnt] > 0 \n  AND [copy_status] = 'Succeeded' \n  AND [dl_dr_nm] like '%/Latest/%'\n  AND convert(varchar, [start_time] , 120) = LEFT(REPLACE('@{pipeline().parameters.WIND_STRT_TIME}' , 'T' , ' '),19) ) SUB  \n  ON MAIN.load_id = SUB.load_id\n  WHERE 1=1\n  AND MAIN.[b_mig_flg] = 1\n  AND MAIN.[interface_id] = '@{pipeline().parameters.interface_id}'\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL3",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GET_TIME",
						"description": "This activity is used to initialize TIME variable with pipeline start time",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TIME",
							"value": {
								"value": "@replace(replace(pipeline().parameters.WIND_STRT_TIME,':',''),'-','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FOR_EACH",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_CFG').output.value",
								"type": "Expression"
							},
							"batchCount": 3,
							"activities": [
								{
									"name": "GET_JOB_TIME",
									"description": "This activity is used to initialize TIME variable with pipeline start time",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "JOB_TIME",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Trans to Silver",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_JOB_TIME",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureBlobFSSource",
											"recursive": true
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL1",
											"type": "DatasetReference",
											"parameters": {
												"SRC_FS_KVS_NM": {
													"value": "@pipeline().parameters.DL_FS_KVS_NM",
													"type": "Expression"
												},
												"DLS_DR": {
													"value": "@{item().DL_DR_NM}",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@{item().DL_FL_NM}",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL1",
											"type": "DatasetReference",
											"parameters": {
												"SRC_FS_KVS_NM": {
													"value": "@pipeline().parameters.DL_FS_KVS_NM",
													"type": "Expression"
												},
												"DLS_DR": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}/",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@{item().DL_FL_NM}",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP_INS_RAW_PIP_INFO",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Trans to Silver",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_INS_PIP_INFO",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@{activity('Trans to Silver').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_dr_nm": {
												"value": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}/",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fl_nm": {
												"value": {
													"value": "@{item().DL_FL_NM}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fs_nm": {
												"value": {
													"value": "@pipeline().parameters.DL_FS_NM",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_rec_cnt": {
												"value": {
													"value": "@item().SRC_REC_CNT",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"end_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"load_id": {
												"value": {
													"value": "@item().load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"load_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"mig_clm_nm": {
												"value": "b_mig_flg",
												"type": "String"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@item().SRC_REC_CNT",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start_time": {
												"value": {
													"value": "@activity('Trans to Silver').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"usecase_id": {
												"value": {
													"value": "@item().usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Silver",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "SP_FAIL_ACT",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Trans to Silver",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_FAIL_ACT",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@activity('Trans to Silver').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"error_msg": {
												"value": {
													"value": "MERGE and Move to Silver activity has failed, ErrorCode :@{activity('Trans to Silver').Error.errorCode}",
													"type": "Expression"
												},
												"type": "String"
											},
											"load_id": {
												"value": {
													"value": "@item().load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@item().SRC_REC_CNT",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"usecase_id": {
												"value": {
													"value": "@item().usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Silver",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"META_DB_SRV_NM": {
						"type": "string",
						"defaultValue": "ls-dp-sql.database.windows.net"
					},
					"META_DB_NM": {
						"type": "string",
						"defaultValue": "sqldb-dataportal"
					},
					"META_USER_NM": {
						"type": "string",
						"defaultValue": "lseadmin"
					},
					"META_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-META-ASQL"
					},
					"DLS_URL": {
						"type": "string",
						"defaultValue": "https://lsdpadls.dfs.core.windows.net/"
					},
					"DL_FS_NM": {
						"type": "string",
						"defaultValue": "lsdpadls"
					},
					"DL_DR_NM": {
						"type": "string",
						"defaultValue": "silver"
					},
					"DL_FS_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-FS-ADLS"
					},
					"SRC_NM": {
						"type": "string",
						"defaultValue": "BRIDGE"
					},
					"SRC_DL_DR_NM": {
						"type": "string",
						"defaultValue": "bronze"
					},
					"SP_INS_PIP_INFO": {
						"type": "string",
						"defaultValue": "Meta.SP_INS_RAW_PIP_INFO"
					},
					"SP_FAIL_ACT": {
						"type": "string",
						"defaultValue": "Meta.SP_FAIL_ACT"
					},
					"WIND_STRT_TIME": {
						"type": "string"
					},
					"PIPELINE_NAME": {
						"type": "string"
					},
					"interface_id": {
						"type": "string"
					}
				},
				"variables": {
					"TIME": {
						"type": "String"
					},
					"JOB_TIME": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/FRAMEWORK"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-06T01:00:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FRW_ASQL_ALL3')]",
				"[concat(variables('factoryId'), '/datasets/DS_FRW_ADLS_ALL1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/4_SIL_TO_GOL1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is used to migrate source table to data lake(Curated) with full copy support. Pipeline is using value of source name and table name in configuration table. ",
				"activities": [
					{
						"name": "GET_CFG",
						"description": "Get migration table information from configuration table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GET_TIME",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT   MAIN.[load_id]\n        ,MAIN.[source_name]\n        ,MAIN.[source]\n        ,MAIN.[interface_id]\n        ,MAIN.[interface_name]\n        ,MAIN.[load_type]\n        ,MAIN.[source_object]\n        ,MAIN.[source_field]\n        ,MAIN.[source_condition]\n        ,MAIN.[target_object]\n        ,MAIN.[target_field]\n        ,MAIN.[target_condition]\n        ,MAIN.[from]\n        ,MAIN.[to]\n        ,MAIN.[interval_type]\n        ,MAIN.[r_mig_flg]\n        ,MAIN.[b_mig_flg]\n        ,MAIN.[c_mig_flg]\n        ,MAIN.[usecase_id]\n        ,MAIN.[src_sys_id]\n        ,MAIN.[trigger_id]\n        ,MAIN.[rest_call_url]\n        ,MAIN.[synapse_object]\n        ,MAIN.[synapse_object_type]\n        ,SUB.[pip_nm]\n        ,SUB.[src_rec_cnt]\n        ,SUB.[copy_status]\n        ,SUB.[dl_rec_cnt]\n        ,SUB.[dl_fs_nm]\n        ,SUB.[dl_dr_nm]\n        ,SUB.[dl_fl_nm]\n        ,SUB.[error_msg]\n        ,SUB.[zone_info]\n  FROM [META].[LOAD_INV_EAI] MAIN\n  JOIN (\n  SELECT\n       [usecase_id]\n      ,[load_id]\n      ,[pip_nm]\n      ,[src_rec_cnt]\n      ,[copy_status]\n      ,[dl_rec_cnt]\n      ,[dl_fs_nm]\n      ,[dl_dr_nm]\n      ,[dl_fl_nm]\n      ,[error_msg]\n      ,[zone_info]\n  FROM [META].[LOG_INV]\n  WHERE 1=1\n  --AND [dl_rec_cnt] > 0 \n  AND [copy_status] = 'Succeeded' \n  AND [dl_dr_nm] like '%/Latest/%'\n  AND convert(varchar, [start_time] , 120) = LEFT(REPLACE('@{pipeline().parameters.WIND_STRT_TIME}' , 'T' , ' '),19) ) SUB  \n  ON MAIN.load_id = SUB.load_id\n  WHERE 1=1\n  AND MAIN.[C_mig_flg] = 1\n  AND MAIN.[interface_id] = '@{pipeline().parameters.interface_id}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL3",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOR_EACH",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_CFG').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "GET_JOB_TIME",
									"description": "This activity is used to initialize TIME variable with pipeline start time",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "JOB_TIME",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Trans to GOLD",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_JOB_TIME",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureBlobFSSource",
											"recursive": true
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL1",
											"type": "DatasetReference",
											"parameters": {
												"SRC_FS_KVS_NM": {
													"value": "@pipeline().parameters.DL_FS_KVS_NM",
													"type": "Expression"
												},
												"DLS_DR": {
													"value": "@{pipeline().parameters.SRC_DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}/",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@{item().DL_FL_NM}",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL1",
											"type": "DatasetReference",
											"parameters": {
												"SRC_FS_KVS_NM": {
													"value": "@pipeline().parameters.DL_FS_KVS_NM",
													"type": "Expression"
												},
												"DLS_DR": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}/",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@{item().DL_FL_NM}",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP_INS_RAW_PIP_INFO",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Trans to GOLD",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_INS_PIP_INFO",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@{activity('Trans to GOLD').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_dr_nm": {
												"value": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}/",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fl_nm": {
												"value": {
													"value": "@{item().DL_FL_NM}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fs_nm": {
												"value": {
													"value": "@pipeline().parameters.DL_FS_NM",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_rec_cnt": {
												"value": {
													"value": "@item().src_rec_cnt",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"end_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"load_id": {
												"value": {
													"value": "@item().load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"load_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"mig_clm_nm": {
												"value": "c_mig_flg",
												"type": "String"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@item().SRC_REC_CNT",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start_time": {
												"value": {
													"value": "@activity('Trans to GOLD').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"usecase_id": {
												"value": {
													"value": "@item().usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Gold",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "SP_FAIL_ACT",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Trans to GOLD",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_FAIL_ACT",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@activity('Trans to GOLD').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"error_msg": {
												"value": {
													"value": "Trans to GOLD activity has failed, ErrorCode :@{activity('Trans to GOLD').Error.errorCode}",
													"type": "Expression"
												},
												"type": "String"
											},
											"load_id": {
												"value": {
													"value": "@item().load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@item().SRC_REC_CNT",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"usecase_id": {
												"value": {
													"value": "@item().usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Gold",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "GET_TIME",
						"description": "This activity is used to initialize TIME variable with pipeline start time",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TIME",
							"value": {
								"value": "@replace(replace(pipeline().parameters.WIND_STRT_TIME,':',''),'-','')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"META_DB_SRV_NM": {
						"type": "string",
						"defaultValue": "ls-dp-sql.database.windows.net"
					},
					"META_DB_NM": {
						"type": "string",
						"defaultValue": "sqldb-dataportal"
					},
					"META_USER_NM": {
						"type": "string",
						"defaultValue": "lseadmin"
					},
					"META_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-META-ASQL"
					},
					"DLS_URL": {
						"type": "string",
						"defaultValue": "https://lsdpadls.dfs.core.windows.net/"
					},
					"DL_FS_NM": {
						"type": "string",
						"defaultValue": "lsdpadls"
					},
					"DL_DR_NM": {
						"type": "string",
						"defaultValue": "gold"
					},
					"DL_FS_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-FS-ADLS"
					},
					"SRC_NM": {
						"type": "string",
						"defaultValue": "BRIDGE"
					},
					"SRC_DL_DR_NM": {
						"type": "string",
						"defaultValue": "silver"
					},
					"SP_INS_PIP_INFO": {
						"type": "string",
						"defaultValue": "Meta.SP_INS_RAW_PIP_INFO"
					},
					"SP_FAIL_ACT": {
						"type": "string",
						"defaultValue": "Meta.SP_FAIL_ACT"
					},
					"SP_UPD_MIG_FLG_INFO": {
						"type": "string",
						"defaultValue": "Meta.SP_DB_UPD_MIG_FLG_INFO"
					},
					"WIND_STRT_TIME": {
						"type": "string"
					},
					"PIPELINE_NAME": {
						"type": "string"
					},
					"interface_id": {
						"type": "string"
					}
				},
				"variables": {
					"TIME": {
						"type": "String"
					},
					"JOB_TIME": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/FRAMEWORK"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-06T01:00:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FRW_ASQL_ALL3')]",
				"[concat(variables('factoryId'), '/datasets/DS_FRW_ADLS_ALL1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SP_COMPLETED3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UNTIL",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(activity('SP_COMPLETED').output.count,1)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SP_COMPLETED",
									"description": "Get migration table information from configuration table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "IF ('@{pipeline().parameters.PARM_FROM}' <> 'NULL')\nBEGIN\n    SELECT *\n    FROM [dbo].[ETL_DATA_INSERT_LOG]\n    where 1=1\n    and FORMAT([START_DATE] , 'yyyyMMddHHmmss') >= '@{pipeline().parameters.START_DATE}'\n    and [RUN_PGM] = '@{pipeline().parameters.RUN_PGM}'\n    and [PARM_FROM] = '@{pipeline().parameters.PARM_FROM}'\n    and [PARM_TO] = '@{pipeline().parameters.PARM_TO}'\nEND\nIF ('@{pipeline().parameters.PARM_FROM}' = 'NULL')\nBEGIN\n    SELECT *\n    FROM [dbo].[ETL_DATA_INSERT_LOG]\n    where 1=1\n    and FORMAT([START_DATE] , 'yyyyMMddHHmmss') >= '@{pipeline().parameters.START_DATE}'\n    and [RUN_PGM] = '@{pipeline().parameters.RUN_PGM}'\nEND",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_FRW_ASQL_ALL3",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_USER_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().globalParameters.GP_LK_SRC_DB_KVS_NM",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "WAIT",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "SP_COMPLETED",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 5
									}
								}
							],
							"timeout": "1:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"RUN_PGM": {
						"type": "string"
					},
					"START_DATE": {
						"type": "string"
					},
					"PARM_FROM": {
						"type": "string"
					},
					"PARM_TO": {
						"type": "string"
					}
				},
				"variables": {
					"X": {
						"type": "String"
					},
					"TMP_X": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/STOREDPROCEDURE"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-10T07:14:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FRW_ASQL_ALL3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_SRC_TO_BRZ_SUB1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is used to migrate source table to data lake(RAW) with full copy support. Pipeline is using value of source name and table name in configuration table. ",
				"activities": [
					{
						"name": "GET_CFG",
						"description": "Get migration table information from configuration table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [load_id]\n      ,[source_name]\n      ,[source]\n      ,[interface_id]\n      ,[interface_name]\n      ,[load_type]\n      ,[source_object_schema]\n      ,[source_object]\n      ,[source_field]\n      ,[source_condition]\n      ,[target_object_schema]\n      ,[target_object]\n      ,[target_field]\n      ,[target_condition]\n      ,[from]\n      ,[to]\n      ,[interval_type]\n      ,[r_mig_flg]\n      ,[b_mig_flg]\n      ,[c_mig_flg]\n      ,[usecase_id]\n      ,[src_sys_id]\n      ,[trigger_id]\n      ,[rest_call_url]\n      ,[synapse_object_schema]\n      ,[synapse_object]\n      ,[synapse_object_type]\n      ,NEWID() as ID \n      ,FORMAT(cast(DATEADD(HOUR,9,GETUTCDATE()) as datetime), 'yyyyMMddHHmmss') as 'yyyyMMddHHmmss'\n  FROM [META].[LOAD_INV_EAI]\n  WHERE 1=1\n  AND [r_mig_flg] = 1\n  AND [interface_id] = '@{pipeline().parameters.IF_ID}'\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL3",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_DB_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOR_EACH",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GET_DATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_DATE').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "GET_SRC_REC_CNT",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select COUNT(*) AS src_rec_cnt \nfrom @{activity('GET_CFG').output.value[0].source_object_schema}.@{activity('GET_CFG').output.value[0].source_object} \nWHERE 1=1\nAND @{split(activity('GET_CFG').output.value[0].target_field,',')[0]} >= '@{item().FROM_DT}' \nAND @{split(activity('GET_CFG').output.value[0].target_field,',')[1]} < '@{item().TO_DT}' ",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_FRW_ASQL_ALL3",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().parameters.SRC_DB_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().parameters.SRC_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().parameters.SRC_DB_USR_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().parameters.SRC_DB_KVS_NM",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "COPY_TO_ADLS_LOG",
									"description": "@{concat(pipeline().parameters.DL_DR_NM, '/', activity('GET_CFG').output.value[0].source_name, '/', activity('GET_CFG').output.value[0].source_object, '/', variables('TIME'))}/@{concat(activity('GET_CFG').output.value[0].source_object,'-',item().FROM_DT,'-',item().TO_DT,'.snappy.parquet')}",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_SRC_REC_CNT",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "."
										},
										{
											"name": "Destination",
											"value": "@{concat(pipeline().parameters.DL_DR_NM, '/', activity('GET_CFG').output.value[0].source_name, '/', activity('GET_CFG').output.value[0].source_object, '/', activity('GET_DATE').output.value)}/@{concat(activity('GET_CFG').output.value[0].source_object,'-',item().FROM_DT,'-',item().TO_DT,'.snappy.parquet')}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * \nfrom @{activity('GET_CFG').output.value[0].source_object_schema}.@{activity('GET_CFG').output.value[0].source_object} \nWHERE 1=1\nAND @{split(activity('GET_CFG').output.value[0].target_field,',')[0]} >= '@{item().FROM_DT}' \nAND @{split(activity('GET_CFG').output.value[0].target_field,',')[1]} < '@{item().TO_DT}' ",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_FRW_ASQL_ALL3",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().parameters.SRC_DB_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().parameters.SRC_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().parameters.SRC_DB_USR_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().parameters.SRC_DB_KVS_NM",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL1",
											"type": "DatasetReference",
											"parameters": {
												"SRC_FS_KVS_NM": {
													"value": "@pipeline().parameters.DL_FS_KVS_NM",
													"type": "Expression"
												},
												"DLS_DR": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{activity('GET_CFG').output.value[0].source_name}/@{activity('GET_CFG').output.value[0].source}/@{activity('GET_CFG').output.value[0].source_object}/@{pipeline().parameters.WIND_STRT_TIME}",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@concat(activity('GET_CFG').output.value[0].source_object,'-',replace(item().FROM_DT,'-',''),'_',replace(item().TO_DT,'-',''),'.snappy.parquet')",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP_INS_RAW_PIP_INFO_LOG",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "COPY_TO_ADLS_LOG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_INS_PIP_INFO",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@{activity('COPY_TO_ADLS_LOG').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_dr_nm": {
												"value": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{activity('GET_CFG').output.value[0].source_name}/@{activity('GET_CFG').output.value[0].source}/@{activity('GET_CFG').output.value[0].source_object}/@{pipeline().parameters.WIND_STRT_TIME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fl_nm": {
												"value": {
													"value": "@concat(activity('GET_CFG').output.value[0].source_object,'_',replace(item().FROM_DT,'-',''),'_',replace(item().TO_DT,'-',''),'.snappy.parquet')",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fs_nm": {
												"value": {
													"value": "@pipeline().parameters.DL_FS_NM",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_rec_cnt": {
												"value": {
													"value": "@activity('COPY_TO_ADLS_LOG').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"end_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"load_id": {
												"value": {
													"value": "@activity('GET_CFG').output.value[0].load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"load_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"mig_clm_nm": {
												"value": "r_mig_flg",
												"type": "String"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().parameters.PIPELINE_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@activity('GET_SRC_REC_CNT').output.firstRow.src_rec_cnt",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start_time": {
												"value": {
													"value": "@pipeline().parameters.WIND_STRT_TIME",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"usecase_id": {
												"value": {
													"value": "@activity('GET_CFG').output.value[0].usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Bronze",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_DB_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "COPY_TO_ADLS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_SRC_REC_CNT",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "."
										},
										{
											"name": "Destination",
											"value": "@{concat(pipeline().parameters.DL_DR_NM, '/', activity('GET_CFG').output.value[0].source_name, '/', activity('GET_CFG').output.value[0].source_object, '/Latest/')}/@{concat(activity('GET_CFG').output.value[0].source_object,'-',item().FROM_DT,'-',item().TO_DT,'.snappy.parquet')}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * \nfrom @{activity('GET_CFG').output.value[0].source_object_schema}.@{activity('GET_CFG').output.value[0].source_object} \nWHERE 1=1\nAND @{split(activity('GET_CFG').output.value[0].target_field,',')[0]} >= '@{item().FROM_DT}' \nAND @{split(activity('GET_CFG').output.value[0].target_field,',')[1]} < '@{item().TO_DT}' ",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_FRW_ASQL_ALL3",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().parameters.SRC_DB_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().parameters.SRC_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().parameters.SRC_DB_USR_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().parameters.SRC_DB_KVS_NM",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL1",
											"type": "DatasetReference",
											"parameters": {
												"SRC_FS_KVS_NM": {
													"value": "@pipeline().parameters.DL_FS_KVS_NM",
													"type": "Expression"
												},
												"DLS_DR": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{activity('GET_CFG').output.value[0].source_name}/@{activity('GET_CFG').output.value[0].source}/@{activity('GET_CFG').output.value[0].source_object}/Latest/",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@concat(activity('GET_CFG').output.value[0].source_object,'_',replace(item().FROM_DT,'-',''),'_',replace(item().TO_DT,'-',''),'.snappy.parquet')",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP_INS_RAW_PIP_INFO",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "COPY_TO_ADLS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_INS_PIP_INFO",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@{activity('COPY_TO_ADLS').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_dr_nm": {
												"value": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{activity('GET_CFG').output.value[0].source_name}/@{activity('GET_CFG').output.value[0].source}/@{activity('GET_CFG').output.value[0].source_object}/Latest/",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fl_nm": {
												"value": {
													"value": "@concat(activity('GET_CFG').output.value[0].source_object,'_',replace(item().FROM_DT,'-',''),'_',replace(item().TO_DT,'-',''),'.snappy.parquet')",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fs_nm": {
												"value": {
													"value": "@pipeline().parameters.DL_FS_NM",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_rec_cnt": {
												"value": {
													"value": "@activity('COPY_TO_ADLS').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"end_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"load_id": {
												"value": {
													"value": "@activity('GET_CFG').output.value[0].load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"load_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"mig_clm_nm": {
												"value": "r_mig_flg",
												"type": "String"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().parameters.PIPELINE_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@activity('GET_SRC_REC_CNT').output.firstRow.src_rec_cnt",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start_time": {
												"value": {
													"value": "@pipeline().parameters.WIND_STRT_TIME",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"usecase_id": {
												"value": {
													"value": "@activity('GET_CFG').output.value[0].usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Bronze",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_DB_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "LOG",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "COPY_TO_ADLS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('COPY_TO_ADLS').output.executionDetails[0].status,'Succeeded')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "FAIL",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[SP_ETL_DATA_INSERT_LOG]",
													"storedProcedureParameters": {
														"err_mesg": {
															"value": {
																"value": "ErrorCode :@{activity('COPY_TO_ADLS').Error.errorCode}",
																"type": "Expression"
															},
															"type": "String"
														},
														"load_cnt": {
															"value": {
																"value": "@activity('COPY_TO_ADLS').output.rowsRead",
																"type": "Expression"
															},
															"type": "Decimal"
														},
														"parm_from": {
															"value": {
																"value": "@{item().FROM_DT}",
																"type": "Expression"
															},
															"type": "String"
														},
														"parm_to": {
															"value": {
																"value": "@{item().TO_DT}",
																"type": "Expression"
															},
															"type": "String"
														},
														"pgm_status": {
															"value": "E",
															"type": "String"
														},
														"run_pgm": {
															"value": {
																"value": "@concat('BRIDGE','_','SYN','_',activity('GET_CFG').output.value[0].synapse_object_schema,'.',activity('GET_CFG').output.value[0].synapse_object)",
																"type": "Expression"
															},
															"type": "String"
														},
														"st_date": {
															"value": {
																"value": "@formatDateTime(concat(substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,0,4),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,4,2),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,6,2)),'yyyy-MM-dd')",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"tgt_job_area": {
															"value": "ODS",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "syndpdatawarehouse",
													"type": "LinkedServiceReference",
													"parameters": {}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SUCCESS",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[SP_ETL_DATA_INSERT_LOG]",
													"storedProcedureParameters": {
														"err_mesg": {
															"value": null,
															"type": "String"
														},
														"load_cnt": {
															"value": {
																"value": "@activity('COPY_TO_ADLS').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Decimal"
														},
														"parm_from": {
															"value": {
																"value": "@{item().FROM_DT}",
																"type": "Expression"
															},
															"type": "String"
														},
														"parm_to": {
															"value": {
																"value": "@{item().TO_DT}",
																"type": "Expression"
															},
															"type": "String"
														},
														"pgm_status": {
															"value": "S",
															"type": "String"
														},
														"run_pgm": {
															"value": {
																"value": "@concat('BRIDGE','_','SYN','_',activity('GET_CFG').output.value[0].synapse_object_schema,'.',activity('GET_CFG').output.value[0].synapse_object)",
																"type": "Expression"
															},
															"type": "String"
														},
														"st_date": {
															"value": {
																"value": "@formatDateTime(concat(substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,0,4),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,4,2),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,6,2)),'yyyy-MM-dd')",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"tgt_job_area": {
															"value": "ODS",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "syndpdatawarehouse",
													"type": "LinkedServiceReference",
													"parameters": {}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "GET_DATE",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GET_DATE_RANGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "SELECT DISTINCT \nFORMAT(DATEADD(@{activity('GET_CFG').output.value[0].interval_type}, DATEDIFF(@{activity('GET_CFG').output.value[0].interval_type}, 0, [DATE]), 0),'@{activity('GET_CFG').output.value[0].target_condition}') AS FROM_DT ,\nFORMAT(DATEADD(@{activity('GET_CFG').output.value[0].interval_type}, 1 ,DATEADD(@{activity('GET_CFG').output.value[0].interval_type}, DATEDIFF(@{activity('GET_CFG').output.value[0].interval_type}, 0, [DATE]), 0)),'@{activity('GET_CFG').output.value[0].target_condition}') AS TO_DT\nFROM [dbo].[V_DIM_FND_CALENDAR_DATES_MST]\nWHERE FORMAT([DATE],'@{activity('GET_CFG').output.value[0].target_condition}') BETWEEN '@{activity('GET_DATE_RANGE').output.value[0].MIN_DT}' AND '@{activity('GET_DATE_RANGE').output.value[0].MAX_DT}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ADW_ALL1",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.LK_SRC_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.LK_SRC_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.LK_SRC_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.LK_SRC_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GET_DATE_RANGE",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nMIN(@{split(activity('GET_CFG').output.value[0].target_field,',')[0]}) AS MIN_DT ,\nMAX(@{split(activity('GET_CFG').output.value[0].target_field,',')[1]}) AS MAX_DT\nFROM [@{activity('GET_CFG').output.value[0].source_object_schema}].[@{activity('GET_CFG').output.value[0].source_object}]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL3",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().globalParameters.GP_BRIDGE_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_DB_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().globalParameters.GP_BRIDGE_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"META_DB_SRV_NM": {
						"type": "string",
						"defaultValue": "ls-dp-sql.database.windows.net"
					},
					"META_DB_NM": {
						"type": "string",
						"defaultValue": "sqldb-dataportal"
					},
					"META_DB_USER_NM": {
						"type": "string",
						"defaultValue": "lseadmin"
					},
					"META_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-META-ASQL"
					},
					"DLS_URL": {
						"type": "string",
						"defaultValue": "https://lsdpadls.dfs.core.windows.net/"
					},
					"DL_FS_NM": {
						"type": "string",
						"defaultValue": "lsdpadls"
					},
					"DL_DR_NM": {
						"type": "string",
						"defaultValue": "bronze"
					},
					"DL_FS_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-FS-ADLS"
					},
					"SRC_DB_SRV_NM": {
						"type": "string",
						"defaultValue": "ls-dp-sql.database.windows.net"
					},
					"SRC_DB_NM": {
						"type": "string",
						"defaultValue": "sqldb-bridge"
					},
					"SRC_NM": {
						"type": "string",
						"defaultValue": "ERP-BRIDGE"
					},
					"SRC_DB_USR_NM": {
						"type": "string",
						"defaultValue": "lseadmin"
					},
					"SRC_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-BRIDGE-ASQL"
					},
					"SP_INS_PIP_INFO": {
						"type": "string",
						"defaultValue": "Meta.SP_INS_RAW_PIP_INFO"
					},
					"SP_FAIL_ACT": {
						"type": "string",
						"defaultValue": "Meta.SP_FAIL_ACT"
					},
					"WIND_STRT_TIME": {
						"type": "string"
					},
					"IF_ID": {
						"type": "string"
					},
					"LK_SRC_SRV_NM": {
						"type": "string",
						"defaultValue": "synw-datawarehouse-prod-001.sql.azuresynapse.net"
					},
					"LK_SRC_DB_NM": {
						"type": "string",
						"defaultValue": "syndpdatawarehouse"
					},
					"LK_SRC_USER_NM": {
						"type": "string",
						"defaultValue": "sqladminuser"
					},
					"LK_SRC_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "PROD-KVS-FRW-ADW-SYN"
					},
					"PIPELINE_NAME": {
						"type": "string"
					}
				},
				"variables": {
					"TIME": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/FRAMEWORK"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-07T02:03:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FRW_ASQL_ALL3')]",
				"[concat(variables('factoryId'), '/datasets/DS_FRW_ADLS_ALL1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_SRC_TO_BRZ')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is used to migrate source table to data lake(RAW) with full copy support. Pipeline is using value of source name and table name in configuration table. ",
				"activities": [
					{
						"name": "GET_CFG",
						"description": "Get migration table information from configuration table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GET_TIME",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [load_id]\n      ,[source_name]\n      ,[source]\n      ,[interface_id]\n      ,[interface_name]\n      ,[load_type]\n      ,[source_object_schema]\n      ,[source_object]\n      ,[source_field]\n      ,[source_condition]\n      ,[target_object_schema]\n      ,[target_object]\n      ,[target_field]\n      ,[target_condition]\n      ,[from]\n      ,[to]\n      ,[interval_type]\n      ,[r_mig_flg]\n      ,[b_mig_flg]\n      ,[c_mig_flg]\n      ,[usecase_id]\n      ,[src_sys_id]\n      ,[trigger_id]\n      ,[rest_call_url]\n      ,[synapse_object_schema]\n      ,[synapse_object]\n      ,[synapse_object_type]\n      ,NEWID() as ID \n      ,FORMAT(cast(DATEADD(HOUR,9,GETUTCDATE()) as datetime), 'yyyyMMddHHmmss') as 'yyyyMMddHHmmss'\n  FROM [META].[LOAD_INV_EAI]\n  WHERE 1=1\n  AND [r_mig_flg] = 1\n  AND [interface_id] = '@{pipeline().parameters.interface_id}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_FRW_ASQL_ALL",
								"type": "DatasetReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_DB_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FILTER_1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_CFG').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().load_type,'full')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FILTER_2",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [
							{
								"name": "TIME",
								"value": "@{concat(pipeline().parameters.DL_DR_NM, '/', item().source_name, '/', item().source, '/', item().source_object, '-ALL/', variables('TIME'))}/@{concat(item().source_object, '.snappy.parquet')}"
							}
						],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_CFG').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().load_type,'incremental')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FOR_EACH_1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FILTER_1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FILTER_1').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "GET_SRC_REC_CNT",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "IF OBJECT_ID ('[@{item().source_object_schema}].[@{item().source_object}]') IS NOT NULL\nselect COUNT(*) AS src_rec_cnt from [@{item().source_object_schema}].[@{item().source_object}] \nIF OBJECT_ID ('[@{item().source_object_schema}].[@{item().source_object}]') IS NULL\nselect 0 AS src_rec_cnt",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_FRW_ASQL_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().parameters.SRC_DB_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().parameters.SRC_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().parameters.SRC_DB_USR_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().parameters.SRC_DB_KVS_NM",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "COPY_TO_ADLS_LOG",
									"description": "@{concat(pipeline().parameters.DL_DR_NM, '/', item().source_name, '/', item().source, '/', item().source_object, '-ALL/', variables('TIME'))}/@{concat(item().source_object, '.snappy.parquet')}",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_SRC_REC_CNT",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "."
										},
										{
											"name": "Destination",
											"value": "@{concat(pipeline().parameters.DL_DR_NM, '/', item().source_name, '/', item().source, '/', item().source_object, '-ALL/', replace(replace(pipeline().parameters.WIND_STRT_TIME,':',''),'-',''))}/@{concat(item().source_object, '.snappy.parquet')}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "IF OBJECT_ID (N'[@{item().source_object_schema}].[@{item().source_object}]', N'U') IS NOT NULL\nselect * from [@{item().source_object_schema}].[@{item().source_object}] \n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_FRW_ASQL_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().parameters.SRC_DB_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().parameters.SRC_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().parameters.SRC_DB_USR_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().parameters.SRC_DB_KVS_NM",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_FS_KVS_NM": {
													"value": "@pipeline().parameters.DL_FS_KVS_NM",
													"type": "Expression"
												},
												"DLS_DR": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}-ALL/@{variables('TIME')}",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@{item().source_object}.snappy.parquet",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP_INS_RAW_PIP_INFO_LOG",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "COPY_TO_ADLS_LOG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_INS_PIP_INFO",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@{activity('COPY_TO_ADLS_LOG').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_dr_nm": {
												"value": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}-ALL/@{variables('TIME')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fl_nm": {
												"value": {
													"value": "@{item().source_object}.snappy.parquet",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fs_nm": {
												"value": {
													"value": "@pipeline().parameters.DL_FS_NM",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_rec_cnt": {
												"value": {
													"value": "@activity('COPY_TO_ADLS_LOG').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"end_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"load_id": {
												"value": {
													"value": "@item().load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"load_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"mig_clm_nm": {
												"value": "r_mig_flg",
												"type": "String"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@activity('GET_SRC_REC_CNT').output.firstRow.src_rec_cnt",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start_time": {
												"value": {
													"value": "@pipeline().parameters.WIND_STRT_TIME",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"usecase_id": {
												"value": {
													"value": "@item().usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Bronze",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_DB_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "COPY_TO_ADLS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_SRC_REC_CNT",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "00:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "."
										},
										{
											"name": "Destination",
											"value": "@{concat(pipeline().parameters.DL_DR_NM, '/', item().source_name, '/', item().source_object, IF(equals(item().load_type,'full'),'-ALL',''), '/Latest/')}/@{concat(item().source_object, '.snappy.parquet')}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "IF OBJECT_ID (N'[@{item().source_object_schema}].[@{item().source_object}]', N'U') IS NOT NULL\nselect * from [@{item().source_object_schema}].[@{item().source_object}] \n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_FRW_ASQL_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_SRV_NM": {
													"value": "@pipeline().parameters.SRC_DB_SRV_NM",
													"type": "Expression"
												},
												"SRC_DB_NM": {
													"value": "@pipeline().parameters.SRC_DB_NM",
													"type": "Expression"
												},
												"SRC_USER_NM": {
													"value": "@pipeline().parameters.SRC_DB_USR_NM",
													"type": "Expression"
												},
												"SRC_DB_KVS_NM": {
													"value": "@pipeline().parameters.SRC_DB_KVS_NM",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_FRW_ADLS_ALL",
											"type": "DatasetReference",
											"parameters": {
												"SRC_FS_KVS_NM": {
													"value": "@pipeline().parameters.DL_FS_KVS_NM",
													"type": "Expression"
												},
												"DLS_DR": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}-ALL/Latest/",
													"type": "Expression"
												},
												"DLS_FN": {
													"value": "@{item().source_object}.snappy.parquet",
													"type": "Expression"
												},
												"DLS_URL": {
													"value": "@pipeline().parameters.DLS_URL",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP_INS_RAW_PIP_INFO",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "COPY_TO_ADLS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@pipeline().parameters.SP_INS_PIP_INFO",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"copy_status": {
												"value": {
													"value": "@{activity('COPY_TO_ADLS').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_dr_nm": {
												"value": {
													"value": "@{pipeline().parameters.DL_DR_NM}/@{item().source_name}/@{item().source}/@{item().source_object}-ALL/Latest/",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fl_nm": {
												"value": {
													"value": "@{item().source_object}.snappy.parquet",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_fs_nm": {
												"value": {
													"value": "@pipeline().parameters.DL_FS_NM",
													"type": "Expression"
												},
												"type": "String"
											},
											"dl_rec_cnt": {
												"value": {
													"value": "@activity('COPY_TO_ADLS').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"end_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"load_id": {
												"value": {
													"value": "@item().load_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"load_time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"mig_clm_nm": {
												"value": "r_mig_flg",
												"type": "String"
											},
											"pip_nm": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rec_cnt": {
												"value": {
													"value": "@activity('GET_SRC_REC_CNT').output.firstRow.src_rec_cnt",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start_time": {
												"value": {
													"value": "@pipeline().parameters.WIND_STRT_TIME",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"usecase_id": {
												"value": {
													"value": "@item().usecase_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"zone": {
												"value": "Bronze",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_FRW_ASQL",
										"type": "LinkedServiceReference",
										"parameters": {
											"SRC_SRV_NM": {
												"value": "@pipeline().parameters.META_DB_SRV_NM",
												"type": "Expression"
											},
											"SRC_DB_NM": {
												"value": "@pipeline().parameters.META_DB_NM",
												"type": "Expression"
											},
											"SRC_USER_NM": {
												"value": "@pipeline().parameters.META_DB_USER_NM",
												"type": "Expression"
											},
											"SRC_DB_KVS_NM": {
												"value": "@pipeline().parameters.META_DB_KVS_NM",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "LOG",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "COPY_TO_ADLS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('COPY_TO_ADLS').output.executionDetails[0].status,'Succeeded')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "FAIL",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[SP_ETL_DATA_INSERT_LOG]",
													"storedProcedureParameters": {
														"err_mesg": {
															"value": {
																"value": "ErrorCode :@{activity('COPY_TO_ADLS').Error.errorCode}",
																"type": "Expression"
															},
															"type": "String"
														},
														"load_cnt": {
															"value": {
																"value": "@activity('COPY_TO_ADLS').output.rowsRead",
																"type": "Expression"
															},
															"type": "Decimal"
														},
														"parm_from": {
															"value": null,
															"type": "String"
														},
														"parm_to": {
															"value": null,
															"type": "String"
														},
														"pgm_status": {
															"value": "E",
															"type": "String"
														},
														"run_pgm": {
															"value": {
																"value": "@concat('BRIDGE','_','SYN','_',item().synapse_object_schema,'.',item().synapse_object)",
																"type": "Expression"
															},
															"type": "String"
														},
														"st_date": {
															"value": {
																"value": "@formatDateTime(concat(substring(item().yyyyMMddHHmmss,0,4),'-',substring(item().yyyyMMddHHmmss,4,2),'-',substring(item().yyyyMMddHHmmss,6,2)),'yyyy-MM-dd')",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"tgt_job_area": {
															"value": "ODS",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "syndpdatawarehouse",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SUCCESS",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[SP_ETL_DATA_INSERT_LOG]",
													"storedProcedureParameters": {
														"err_mesg": {
															"value": null,
															"type": "String"
														},
														"load_cnt": {
															"value": {
																"value": "@activity('COPY_TO_ADLS').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Decimal"
														},
														"parm_from": {
															"value": null,
															"type": "String"
														},
														"parm_to": {
															"value": null,
															"type": "String"
														},
														"pgm_status": {
															"value": "S",
															"type": "String"
														},
														"run_pgm": {
															"value": {
																"value": "@concat('BRIDGE','_','SYN','_',item().synapse_object_schema,'.',item().synapse_object)",
																"type": "Expression"
															},
															"type": "String"
														},
														"st_date": {
															"value": {
																"value": "@formatDateTime(concat(substring(item().yyyyMMddHHmmss,0,4),'-',substring(item().yyyyMMddHHmmss,4,2),'-',substring(item().yyyyMMddHHmmss,6,2)),'yyyy-MM-dd')",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"tgt_job_area": {
															"value": "ODS",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "syndpdatawarehouse",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "FOR_EACH_2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FILTER_2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FILTER_2').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "2_PL_COPY_SRC_TO_BRZ_ASQL_EAI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "2_SRC_TO_BRZ_SUB",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"WIND_STRT_TIME": {
												"value": "@pipeline().parameters.WIND_STRT_TIME",
												"type": "Expression"
											},
											"IF_ID": {
												"value": "@item().interface_id",
												"type": "Expression"
											},
											"PIPELINE_NAME": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "GET_TIME",
						"description": "This activity is used to initialize TIME variable with pipeline start time",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TIME",
							"value": {
								"value": "@replace(replace(pipeline().parameters.WIND_STRT_TIME,':',''),'-','')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"META_DB_SRV_NM": {
						"type": "string",
						"defaultValue": "ls-dp-sql.database.windows.net"
					},
					"META_DB_NM": {
						"type": "string",
						"defaultValue": "sqldb-dataportal"
					},
					"META_DB_USER_NM": {
						"type": "string",
						"defaultValue": "lseadmin"
					},
					"META_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-META-ASQL"
					},
					"META_TBL_NM": {
						"type": "string",
						"defaultValue": "Meta.LOAD_INV_EAI"
					},
					"DLS_URL": {
						"type": "string",
						"defaultValue": "https://lsdpadls.dfs.core.windows.net/"
					},
					"DL_FS_NM": {
						"type": "string",
						"defaultValue": "lsdpadls"
					},
					"DL_DR_NM": {
						"type": "string",
						"defaultValue": "bronze"
					},
					"DL_FS_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-FS-ADLS"
					},
					"SRC_DB_SRV_NM": {
						"type": "string",
						"defaultValue": "ls-dp-sql.database.windows.net"
					},
					"SRC_DB_NM": {
						"type": "string",
						"defaultValue": "sqldb-bridge"
					},
					"SRC_NM": {
						"type": "string",
						"defaultValue": "ERP-BRIDGE"
					},
					"SRC_DB_USR_NM": {
						"type": "string",
						"defaultValue": "lseadmin"
					},
					"SRC_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "KVS-FRW-BRIDGE-ASQL"
					},
					"SP_INS_PIP_INFO": {
						"type": "string",
						"defaultValue": "Meta.SP_INS_RAW_PIP_INFO"
					},
					"SP_FAIL_ACT": {
						"type": "string",
						"defaultValue": "Meta.SP_FAIL_ACT"
					},
					"WIND_STRT_TIME": {
						"type": "string"
					},
					"LK_SRC_SRV_NM": {
						"type": "string",
						"defaultValue": "synw-datawarehouse-prod-001.sql.azuresynapse.net"
					},
					"LK_SRC_DB_NM": {
						"type": "string",
						"defaultValue": "syndpdatawarehouse"
					},
					"LK_SRC_USER_NM": {
						"type": "string",
						"defaultValue": "sqladminuser"
					},
					"LK_SRC_DB_KVS_NM": {
						"type": "string",
						"defaultValue": "PROD-KVS-FRW-ADW-SYN"
					},
					"interface_id": {
						"type": "string"
					}
				},
				"variables": {
					"TIME": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2ND PROJECT/3. FRAMEWORK/FRAMEWORK"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-07T02:03:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/2_SRC_TO_BRZ_SUB')]"
			]
		}
	]
}