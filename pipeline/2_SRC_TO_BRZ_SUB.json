{
	"name": "2_SRC_TO_BRZ_SUB",
	"properties": {
		"description": "This pipeline is used to migrate source table to data lake(RAW) with full copy support. Pipeline is using value of source name and table name in configuration table. ",
		"activities": [
			{
				"name": "GET_CFG",
				"description": "Get migration table information from configuration table",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT [load_id]\n      ,[source_name]\n      ,[source]\n      ,[interface_id]\n      ,[interface_name]\n      ,[load_type]\n      ,[source_object_schema]\n      ,[source_object]\n      ,[source_field]\n      ,[source_condition]\n      ,[target_object_schema]\n      ,[target_object]\n      ,[target_field]\n      ,[target_condition]\n      ,[from]\n      ,[to]\n      ,[interval_type]\n      ,[r_mig_flg]\n      ,[b_mig_flg]\n      ,[c_mig_flg]\n      ,[usecase_id]\n      ,[src_sys_id]\n      ,[trigger_id]\n      ,[rest_call_url]\n      ,[synapse_object_schema]\n      ,[synapse_object]\n      ,[synapse_object_type]\n      ,NEWID() as ID \n      ,FORMAT(cast(DATEADD(HOUR,9,GETUTCDATE()) as datetime), 'yyyyMMddHHmmss') as 'yyyyMMddHHmmss'\n  FROM [META].[LOAD_INV_EAI]\n  WHERE 1=1\n  AND [r_mig_flg] = 1\n  AND [interface_id] = '@{pipeline().parameters.IF_ID}'\n",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_FRW_ASQL_ALL",
						"type": "DatasetReference",
						"parameters": {
							"SRC_SRV_NM": {
								"value": "@pipeline().parameters.META_DB_SRV_NM",
								"type": "Expression"
							},
							"SRC_DB_NM": {
								"value": "@pipeline().parameters.META_DB_NM",
								"type": "Expression"
							},
							"SRC_USER_NM": {
								"value": "@pipeline().parameters.META_DB_USER_NM",
								"type": "Expression"
							},
							"SRC_DB_KVS_NM": {
								"value": "@pipeline().parameters.META_DB_KVS_NM",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "FOR_EACH",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GET_DATE",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GET_DATE').output.value",
						"type": "Expression"
					},
					"batchCount": 10,
					"activities": [
						{
							"name": "GET_SRC_REC_CNT",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "OracleSource",
									"oracleReaderQuery": {
										"value": "SELECT \n    CASE \n        WHEN EXISTS (\n            SELECT 1 \n            FROM ALL_TABLES \n            WHERE OWNER = UPPER('@{pipeline().parameters.source_object_schema}')\n              AND TABLE_NAME = UPPER('@{item().source_object}')\n        ) \n        THEN (\n            SELECT COUNT(*) \n            FROM @{pipeline().parameters.source_object_schema}.@{item().source_object}\n        )\n        ELSE 0\n    END AS src_rec_cnt\nFROM DUAL\n",
										"type": "Expression"
									},
									"partitionOption": "None",
									"queryTimeout": "02:00:00"
								},
								"dataset": {
									"referenceName": "ERP_Oracle",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "COPY_TO_ADLS_LOG",
							"description": "@{concat(pipeline().parameters.DL_DR_NM, '/', activity('GET_CFG').output.value[0].source_name, '/', activity('GET_CFG').output.value[0].source_object, '/', variables('TIME'))}/@{concat(activity('GET_CFG').output.value[0].source_object,'-',item().FROM_DT,'-',item().TO_DT,'.snappy.parquet')}",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "GET_SRC_REC_CNT",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "00:30:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [
								{
									"name": "Source",
									"value": "."
								},
								{
									"name": "Destination",
									"value": "@{concat(pipeline().parameters.DL_DR_NM, '/', activity('GET_CFG').output.value[0].source_name, '/', activity('GET_CFG').output.value[0].source_object, '/', activity('GET_DATE').output.value)}/@{concat(activity('GET_CFG').output.value[0].source_object,'-',item().FROM_DT,'-',item().TO_DT,'.snappy.parquet')}"
								}
							],
							"typeProperties": {
								"source": {
									"type": "OracleSource",
									"oracleReaderQuery": "SELECT * \nFROM @{pipeline().parameters.source_object_schema}.@{activity('GET_CFG').output.value[0].source_object}\nWHERE 1=1\n  AND @{split(activity('GET_CFG').output.value[0].target_field,',')[0]} >= TO_DATE('@{item().FROM_DT}', 'YYYY-MM-DD')\n  AND @{split(activity('GET_CFG').output.value[0].target_field,',')[1]} < TO_DATE('@{item().TO_DT}', 'YYYY-MM-DD')",
									"partitionOption": "None",
									"queryTimeout": "02:00:00"
								},
								"sink": {
									"type": "AzureBlobFSSink"
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "ERP_Oracle",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "DS_FRW_ADLS_ALL",
									"type": "DatasetReference",
									"parameters": {
										"SRC_FS_KVS_NM": {
											"value": "@pipeline().parameters.DL_FS_KVS_NM",
											"type": "Expression"
										},
										"DLS_DR": {
											"value": "@{pipeline().parameters.DL_DR_NM}/@{activity('GET_CFG').output.value[0].source_name}/@{activity('GET_CFG').output.value[0].source}/@{activity('GET_CFG').output.value[0].source_object}/@{pipeline().parameters.WIND_STRT_TIME}",
											"type": "Expression"
										},
										"DLS_FN": {
											"value": "@concat(activity('GET_CFG').output.value[0].source_object,'-',replace(item().FROM_DT,'-',''),'_',replace(item().TO_DT,'-',''),'.snappy.parquet')",
											"type": "Expression"
										},
										"DLS_URL": {
											"value": "@pipeline().parameters.DLS_URL",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "SP_INS_RAW_PIP_INFO_LOG",
							"type": "SqlServerStoredProcedure",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "COPY_TO_ADLS_LOG",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": {
									"value": "@pipeline().parameters.SP_INS_PIP_INFO",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"copy_status": {
										"value": {
											"value": "@{activity('COPY_TO_ADLS_LOG').output.executionDetails[0].status}",
											"type": "Expression"
										},
										"type": "String"
									},
									"dl_dr_nm": {
										"value": {
											"value": "@{pipeline().parameters.DL_DR_NM}/@{activity('GET_CFG').output.value[0].source_name}/@{activity('GET_CFG').output.value[0].source}/@{activity('GET_CFG').output.value[0].source_object}/@{pipeline().parameters.WIND_STRT_TIME}",
											"type": "Expression"
										},
										"type": "String"
									},
									"dl_fl_nm": {
										"value": {
											"value": "@concat(activity('GET_CFG').output.value[0].source_object,'_',replace(item().FROM_DT,'-',''),'_',replace(item().TO_DT,'-',''),'.snappy.parquet')",
											"type": "Expression"
										},
										"type": "String"
									},
									"dl_fs_nm": {
										"value": {
											"value": "@pipeline().parameters.DL_FS_NM",
											"type": "Expression"
										},
										"type": "String"
									},
									"dl_rec_cnt": {
										"value": {
											"value": "@activity('COPY_TO_ADLS_LOG').output.rowsCopied",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"end_time": {
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"load_id": {
										"value": {
											"value": "@activity('GET_CFG').output.value[0].load_id",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"load_time": {
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"mig_clm_nm": {
										"value": "r_mig_flg",
										"type": "String"
									},
									"pip_nm": {
										"value": {
											"value": "@pipeline().parameters.PIPELINE_NAME",
											"type": "Expression"
										},
										"type": "String"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									},
									"src_rec_cnt": {
										"value": {
											"value": "@activity('GET_SRC_REC_CNT').output.firstRow.src_rec_cnt",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"start_time": {
										"value": {
											"value": "@pipeline().parameters.WIND_STRT_TIME",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"usecase_id": {
										"value": {
											"value": "@activity('GET_CFG').output.value[0].usecase_id",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"zone": {
										"value": "Bronze",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_FRW_ASQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_DB_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "COPY_TO_ADLS",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "GET_SRC_REC_CNT",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "00:30:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [
								{
									"name": "Source",
									"value": "."
								},
								{
									"name": "Destination",
									"value": "@{concat(pipeline().parameters.DL_DR_NM, '/', activity('GET_CFG').output.value[0].source_name, '/', activity('GET_CFG').output.value[0].source_object, '/Latest/')}/@{concat(activity('GET_CFG').output.value[0].source_object,'-',item().FROM_DT,'-',item().TO_DT,'.snappy.parquet')}"
								}
							],
							"typeProperties": {
								"source": {
									"type": "OracleSource",
									"oracleReaderQuery": "SELECT * \nFROM @{pipeline().parameters.source_object_schema}.@{activity('GET_CFG').output.value[0].source_object}\nWHERE 1=1\n  AND @{split(activity('GET_CFG').output.value[0].target_field,',')[0]} >= TO_DATE('@{item().FROM_DT}', 'YYYY-MM-DD')\n  AND @{split(activity('GET_CFG').output.value[0].target_field,',')[1]} < TO_DATE('@{item().TO_DT}', 'YYYY-MM-DD')",
									"partitionOption": "None",
									"queryTimeout": "02:00:00"
								},
								"sink": {
									"type": "AzureBlobFSSink"
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "ERP_Oracle",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "DS_FRW_ADLS_ALL",
									"type": "DatasetReference",
									"parameters": {
										"SRC_FS_KVS_NM": {
											"value": "@pipeline().parameters.DL_FS_KVS_NM",
											"type": "Expression"
										},
										"DLS_DR": {
											"value": "@{pipeline().parameters.DL_DR_NM}/@{activity('GET_CFG').output.value[0].source_name}/@{activity('GET_CFG').output.value[0].source}/@{activity('GET_CFG').output.value[0].source_object}/Latest/",
											"type": "Expression"
										},
										"DLS_FN": {
											"value": "@concat(activity('GET_CFG').output.value[0].source_object,'_',replace(item().FROM_DT,'-',''),'_',replace(item().TO_DT,'-',''),'.snappy.parquet')",
											"type": "Expression"
										},
										"DLS_URL": {
											"value": "@pipeline().parameters.DLS_URL",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "SP_INS_RAW_PIP_INFO",
							"type": "SqlServerStoredProcedure",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "COPY_TO_ADLS",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": {
									"value": "@pipeline().parameters.SP_INS_PIP_INFO",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"copy_status": {
										"value": {
											"value": "@{activity('COPY_TO_ADLS').output.executionDetails[0].status}",
											"type": "Expression"
										},
										"type": "String"
									},
									"dl_dr_nm": {
										"value": {
											"value": "@{pipeline().parameters.DL_DR_NM}/@{activity('GET_CFG').output.value[0].source_name}/@{activity('GET_CFG').output.value[0].source}/@{activity('GET_CFG').output.value[0].source_object}/Latest/",
											"type": "Expression"
										},
										"type": "String"
									},
									"dl_fl_nm": {
										"value": {
											"value": "@concat(activity('GET_CFG').output.value[0].source_object,'_',replace(item().FROM_DT,'-',''),'_',replace(item().TO_DT,'-',''),'.snappy.parquet')",
											"type": "Expression"
										},
										"type": "String"
									},
									"dl_fs_nm": {
										"value": {
											"value": "@pipeline().parameters.DL_FS_NM",
											"type": "Expression"
										},
										"type": "String"
									},
									"dl_rec_cnt": {
										"value": {
											"value": "@activity('COPY_TO_ADLS').output.rowsCopied",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"end_time": {
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"load_id": {
										"value": {
											"value": "@activity('GET_CFG').output.value[0].load_id",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"load_time": {
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"mig_clm_nm": {
										"value": "r_mig_flg",
										"type": "String"
									},
									"pip_nm": {
										"value": {
											"value": "@pipeline().parameters.PIPELINE_NAME",
											"type": "Expression"
										},
										"type": "String"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									},
									"src_rec_cnt": {
										"value": {
											"value": "@activity('GET_SRC_REC_CNT').output.firstRow.src_rec_cnt",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"start_time": {
										"value": {
											"value": "@pipeline().parameters.WIND_STRT_TIME",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"usecase_id": {
										"value": {
											"value": "@activity('GET_CFG').output.value[0].usecase_id",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"zone": {
										"value": "Bronze",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_FRW_ASQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"SRC_SRV_NM": {
										"value": "@pipeline().parameters.META_DB_SRV_NM",
										"type": "Expression"
									},
									"SRC_DB_NM": {
										"value": "@pipeline().parameters.META_DB_NM",
										"type": "Expression"
									},
									"SRC_USER_NM": {
										"value": "@pipeline().parameters.META_DB_USER_NM",
										"type": "Expression"
									},
									"SRC_DB_KVS_NM": {
										"value": "@pipeline().parameters.META_DB_KVS_NM",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "LOG",
							"type": "IfCondition",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "COPY_TO_ADLS",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(activity('COPY_TO_ADLS').output.executionDetails[0].status,'Succeeded')",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "FAIL",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[dbo].[SP_ETL_DATA_INSERT_LOG]",
											"storedProcedureParameters": {
												"err_mesg": {
													"value": {
														"value": "ErrorCode :@{activity('COPY_TO_ADLS').Error.errorCode}",
														"type": "Expression"
													},
													"type": "String"
												},
												"load_cnt": {
													"value": {
														"value": "@activity('COPY_TO_ADLS').output.rowsRead",
														"type": "Expression"
													},
													"type": "Decimal"
												},
												"parm_from": {
													"value": {
														"value": "@{item().FROM_DT}",
														"type": "Expression"
													},
													"type": "String"
												},
												"parm_to": {
													"value": {
														"value": "@{item().TO_DT}",
														"type": "Expression"
													},
													"type": "String"
												},
												"pgm_status": {
													"value": "E",
													"type": "String"
												},
												"run_pgm": {
													"value": {
														"value": "@concat('BRIDGE','_','SYN','_',activity('GET_CFG').output.value[0].synapse_object_schema,'.',activity('GET_CFG').output.value[0].synapse_object)",
														"type": "Expression"
													},
													"type": "String"
												},
												"st_date": {
													"value": {
														"value": "@formatDateTime(concat(substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,0,4),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,4,2),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,6,2)),'yyyy-MM-dd')",
														"type": "Expression"
													},
													"type": "DateTime"
												},
												"tgt_job_area": {
													"value": "ODS",
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "syndpdatawarehouse",
											"type": "LinkedServiceReference"
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "SUCCESS",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[dbo].[SP_ETL_DATA_INSERT_LOG]",
											"storedProcedureParameters": {
												"err_mesg": {
													"value": null,
													"type": "String"
												},
												"load_cnt": {
													"value": {
														"value": "@activity('COPY_TO_ADLS').output.rowsCopied",
														"type": "Expression"
													},
													"type": "Decimal"
												},
												"parm_from": {
													"value": {
														"value": "@{item().FROM_DT}",
														"type": "Expression"
													},
													"type": "String"
												},
												"parm_to": {
													"value": {
														"value": "@{item().TO_DT}",
														"type": "Expression"
													},
													"type": "String"
												},
												"pgm_status": {
													"value": "S",
													"type": "String"
												},
												"run_pgm": {
													"value": {
														"value": "@concat('BRIDGE','_','SYN','_',activity('GET_CFG').output.value[0].synapse_object_schema,'.',activity('GET_CFG').output.value[0].synapse_object)",
														"type": "Expression"
													},
													"type": "String"
												},
												"st_date": {
													"value": {
														"value": "@formatDateTime(concat(substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,0,4),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,4,2),'-',substring(activity('GET_CFG').output.value[0].yyyyMMddHHmmss,6,2)),'yyyy-MM-dd')",
														"type": "Expression"
													},
													"type": "DateTime"
												},
												"tgt_job_area": {
													"value": "ODS",
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "syndpdatawarehouse",
											"type": "LinkedServiceReference"
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "GET_DATE",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "GET_DATE_RANGE",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderQuery": {
							"value": "SELECT DISTINCT \nFORMAT(DATEADD(@{activity('GET_CFG').output.value[0].interval_type}, DATEDIFF(@{activity('GET_CFG').output.value[0].interval_type}, 0, [DATE]), 0),'@{activity('GET_CFG').output.value[0].target_condition}') AS FROM_DT ,\nFORMAT(DATEADD(@{activity('GET_CFG').output.value[0].interval_type}, 1 ,DATEADD(@{activity('GET_CFG').output.value[0].interval_type}, DATEDIFF(@{activity('GET_CFG').output.value[0].interval_type}, 0, [DATE]), 0)),'@{activity('GET_CFG').output.value[0].target_condition}') AS TO_DT\nFROM [dbo].[V_DIM_FND_CALENDAR_DATES_MST]\nWHERE FORMAT([DATE],'@{activity('GET_CFG').output.value[0].target_condition}') BETWEEN '@{activity('GET_DATE_RANGE').output.value[0].MIN_DT}' AND '@{activity('GET_DATE_RANGE').output.value[0].MAX_DT}'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_FRW_ADW_ALL",
						"type": "DatasetReference",
						"parameters": {
							"SRC_SRV_NM": {
								"value": "@pipeline().parameters.LK_SRC_SRV_NM",
								"type": "Expression"
							},
							"SRC_DB_NM": {
								"value": "@pipeline().parameters.LK_SRC_DB_NM",
								"type": "Expression"
							},
							"SRC_USER_NM": {
								"value": "@pipeline().parameters.LK_SRC_USER_NM",
								"type": "Expression"
							},
							"SRC_DB_KVS_NM": {
								"value": "@pipeline().parameters.LK_SRC_DB_KVS_NM",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "GET_DATE_RANGE",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "GET_CFG",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT \nMIN(@{split(activity('GET_CFG').output.value[0].target_field,',')[0]}) AS MIN_DT ,\nMAX(@{split(activity('GET_CFG').output.value[0].target_field,',')[1]}) AS MAX_DT\nFROM [@{activity('GET_CFG').output.value[0].source_object_schema}].[@{activity('GET_CFG').output.value[0].source_object}]",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_FRW_ASQL_ALL",
						"type": "DatasetReference",
						"parameters": {
							"SRC_SRV_NM": {
								"value": "@pipeline().parameters.META_DB_SRV_NM",
								"type": "Expression"
							},
							"SRC_DB_NM": {
								"value": "@pipeline().globalParameters.GP_BRIDGE_DB_NM",
								"type": "Expression"
							},
							"SRC_USER_NM": {
								"value": "@pipeline().parameters.META_DB_USER_NM",
								"type": "Expression"
							},
							"SRC_DB_KVS_NM": {
								"value": "@pipeline().globalParameters.GP_BRIDGE_DB_KVS_NM",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			}
		],
		"parameters": {
			"META_DB_SRV_NM": {
				"type": "string",
				"defaultValue": "ls-dp-sql.database.windows.net"
			},
			"META_DB_NM": {
				"type": "string",
				"defaultValue": "sqldb-dataportal"
			},
			"META_DB_USER_NM": {
				"type": "string",
				"defaultValue": "lseadmin"
			},
			"META_DB_KVS_NM": {
				"type": "string",
				"defaultValue": "KVS-FRW-META-ASQL"
			},
			"DLS_URL": {
				"type": "string",
				"defaultValue": "https://lsdpadls.dfs.core.windows.net/"
			},
			"DL_FS_NM": {
				"type": "string",
				"defaultValue": "lsdpadls"
			},
			"DL_DR_NM": {
				"type": "string",
				"defaultValue": "bronze"
			},
			"DL_FS_KVS_NM": {
				"type": "string",
				"defaultValue": "KVS-FRW-FS-ADLS"
			},
			"SRC_DB_SRV_NM": {
				"type": "string",
				"defaultValue": "ls-dp-sql.database.windows.net"
			},
			"SRC_DB_NM": {
				"type": "string",
				"defaultValue": "sqldb-bridge"
			},
			"SRC_NM": {
				"type": "string",
				"defaultValue": "ERP-BRIDGE"
			},
			"SRC_DB_USR_NM": {
				"type": "string",
				"defaultValue": "lseadmin"
			},
			"SRC_DB_KVS_NM": {
				"type": "string",
				"defaultValue": "KVS-FRW-BRIDGE-ASQL"
			},
			"SP_INS_PIP_INFO": {
				"type": "string",
				"defaultValue": "Meta.SP_INS_RAW_PIP_INFO"
			},
			"SP_FAIL_ACT": {
				"type": "string",
				"defaultValue": "Meta.SP_FAIL_ACT"
			},
			"WIND_STRT_TIME": {
				"type": "string"
			},
			"IF_ID": {
				"type": "string"
			},
			"LK_SRC_SRV_NM": {
				"type": "string",
				"defaultValue": "synw-datawarehouse-prod-001.sql.azuresynapse.net"
			},
			"LK_SRC_DB_NM": {
				"type": "string",
				"defaultValue": "syndpdatawarehouse"
			},
			"LK_SRC_USER_NM": {
				"type": "string",
				"defaultValue": "sqladminuser"
			},
			"LK_SRC_DB_KVS_NM": {
				"type": "string",
				"defaultValue": "PROD-KVS-FRW-ADW-SYN"
			},
			"PIPELINE_NAME": {
				"type": "string"
			},
			"source_object_schema": {
				"type": "string"
			}
		},
		"variables": {
			"TIME": {
				"type": "String"
			}
		},
		"folder": {
			"name": "2ND PROJECT/3. FRAMEWORK/FRAMEWORK"
		},
		"annotations": [],
		"lastPublishTime": "2023-12-07T02:03:24Z"
	}
}