{
	"name": "BI_DASH_KPI_INPUT_MV_EXP",
	"properties": {
		"activities": [
			{
				"name": "TRUNCATE_BRIDGE",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "GET_CFG",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "LS_FRW_ASQL",
					"type": "LinkedServiceReference",
					"parameters": {
						"SRC_SRV_NM": {
							"value": "@pipeline().globalParameters.GP_META_DB_SRV_NM",
							"type": "Expression"
						},
						"SRC_DB_NM": {
							"value": "@pipeline().globalParameters.GP_BRIDGE_DB_NM",
							"type": "Expression"
						},
						"SRC_USER_NM": {
							"value": "@pipeline().globalParameters.GP_META_USER_NM",
							"type": "Expression"
						},
						"SRC_DB_KVS_NM": {
							"value": "@pipeline().globalParameters.GP_BRIDGE_DB_KVS_NM",
							"type": "Expression"
						}
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "IF EXISTS (SELECT * FROM sys.objects WHERE 1=1 AND name = N'@{activity('GET_CFG').output.firstRow.source_object}' AND type = N'U')\nTRUNCATE TABLE [@{activity('GET_CFG').output.firstRow.source_object_schema}].[@{activity('GET_CFG').output.firstRow.source_object}]",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "GET_CFG",
				"description": "Get migration table information from configuration table",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT [load_id]\n      ,[source_name]\n      ,[interface_id]\n      ,[interface_name]\n      ,[load_type]\n      ,[source_object_schema]\n      ,[source_object]\n      ,[source_field]\n      ,[source_condition]\n      ,[target_object_schema]\n      ,[target_object]\n      ,[target_field]\n      ,[target_condition]\n      ,[from]\n      ,[to]\n      ,[interval_type]\n      ,[r_mig_flg]\n      ,[b_mig_flg]\n      ,[c_mig_flg]\n      ,[usecase_id]\n      ,[src_sys_id]\n      ,[trigger_id]\n      ,[rest_call_url]\n      ,[synapse_object_schema]\n      ,[synapse_object]\n      ,[synapse_object_type]\n      ,NEWID() as ID \n      ,FORMAT(cast(DATEADD(HOUR,9,GETUTCDATE()) as datetime), 'yyyyMMddHHmmss') as 'yyyyMMddHHmmss'\n  FROM [META].[LOAD_INV_EAI]\n  WHERE 1=1\n  AND [interface_id] = '@{variables('IF_ID')}'",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_FRW_ASQL_ALL",
						"type": "DatasetReference",
						"parameters": {
							"SRC_SRV_NM": {
								"value": "@pipeline().globalParameters.GP_META_DB_SRV_NM",
								"type": "Expression"
							},
							"SRC_DB_NM": {
								"value": "@pipeline().globalParameters.GP_META_DB_NM",
								"type": "Expression"
							},
							"SRC_USER_NM": {
								"value": "@pipeline().globalParameters.GP_META_USER_NM",
								"type": "Expression"
							},
							"SRC_DB_KVS_NM": {
								"value": "@pipeline().globalParameters.GP_META_DB_KVS_NM",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "SET_BODY",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "TRUNCATE_BRIDGE",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "BODY",
					"value": {
						"value": "@concat('{\n    \"request\": {\n        \"header\": {\n            \"IF_ID\": \"',variables('IF_ID'),'\",\n            \"IF_GUUID\": \"',activity('GET_CFG').output.firstRow.ID,'\",\n            \"IF_UUID\": \"',activity('GET_CFG').output.firstRow.ID,'\",\n            \"IF_DATETIME\": \"',activity('GET_CFG').output.firstRow.yyyyMMddHHmmss,'\"\n        },\n        \"body\": {\n            \"IF_TOTAL_CNT\": \"0\",\n            \"IF_SPLIT_CNT\": \"1\",\n            \"IF_SPLIT_SEQ\": \"1\",\n            \"IF_REQ_DATA\": [{\"',variables('FROM_COLUMN'),'\":\"', \n            if(\n                empty(activity('GET_CFG').output.firstRow.from),\n                variables('FROM'),\n                formatDateTime(activity('GET_CFG').output.firstRow.from,activity('GET_CFG').output.firstRow.source_condition)\n            )\n            ,'\"}]\n        }\n    }\n}')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "REST_CALL",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "SET_BODY",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('GET_CFG').output.firstRow.rest_call_url,'dev')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "WEB_PROD",
							"type": "WebActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"method": "POST",
								"httpRequestTimeout": "00:07:00",
								"url": {
									"value": "@pipeline().globalParameters.GP_EAI_URL_PROD",
									"type": "Expression"
								},
								"body": {
									"value": "@{variables('BODY')}",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "WEB_DEV",
							"type": "WebActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"method": "POST",
								"httpRequestTimeout": "00:10:00",
								"url": {
									"value": "@pipeline().globalParameters.GP_EAI_URL_DEV",
									"type": "Expression"
								},
								"body": {
									"value": "@{variables('BODY')}",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "COMPLETED",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "REST_CALL",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "EAI_COMPLETED",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"IF_ID": {
							"value": "@variables('IF_ID')",
							"type": "Expression"
						},
						"IF_DATETIME": {
							"value": "@activity('GET_CFG').output.firstRow.yyyyMMddHHmmss",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "UPSERT",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "COMPLETED",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "SqlDWSink",
						"writeBehavior": "Upsert",
						"upsertSettings": {
							"keys": [
								"YYYY",
								"MENU_CD",
								"DEPT_CD",
								"KPI_CD",
								"YYYYMM",
								"MV_YYYYMM"
							],
							"interimSchemaName": {
								"value": "@{activity('GET_CFG').output.firstRow.synapse_object_schema}",
								"type": "Expression"
							}
						},
						"sqlWriterUseTableLock": true,
						"tableOption": "autoCreate",
						"disableMetricsCollection": false
					},
					"enableStaging": true,
					"stagingSettings": {
						"linkedServiceName": {
							"referenceName": "databrickslspocsa",
							"type": "LinkedServiceReference"
						},
						"path": "synapse-fs"
					}
				},
				"inputs": [
					{
						"referenceName": "DS_FRW_ASQL_TBL",
						"type": "DatasetReference",
						"parameters": {
							"SRC_SRV_NM": {
								"value": "@pipeline().globalParameters.GP_META_DB_SRV_NM",
								"type": "Expression"
							},
							"SRC_DB_NM": {
								"value": "@pipeline().globalParameters.GP_BRIDGE_DB_NM",
								"type": "Expression"
							},
							"SRC_USER_NM": {
								"value": "@pipeline().globalParameters.GP_META_USER_NM",
								"type": "Expression"
							},
							"SRC_DB_KVS_NM": {
								"value": "@pipeline().globalParameters.GP_BRIDGE_DB_KVS_NM",
								"type": "Expression"
							},
							"SCHEMA_NM": {
								"value": "@{activity('GET_CFG').output.firstRow.source_object_schema}",
								"type": "Expression"
							},
							"TBL_NM": {
								"value": "@{activity('GET_CFG').output.firstRow.source_object}",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DS_FRW_ADW_TBL",
						"type": "DatasetReference",
						"parameters": {
							"SRC_SRV_NM": {
								"value": "@pipeline().globalParameters.GP_LK_SRC_SRV_NM",
								"type": "Expression"
							},
							"SRC_DB_NM": {
								"value": "@pipeline().globalParameters.GP_LK_SRC_DB_NM",
								"type": "Expression"
							},
							"SRC_USER_NM": {
								"value": "@pipeline().globalParameters.GP_LK_SRC_USER_NM",
								"type": "Expression"
							},
							"SRC_DB_KVS_NM": {
								"value": "@pipeline().globalParameters.GP_LK_SRC_DB_KVS_NM",
								"type": "Expression"
							},
							"SCHEMA_NM": {
								"value": "@activity('GET_CFG').output.firstRow.synapse_object_schema\n",
								"type": "Expression"
							},
							"TABLE_NM": {
								"value": "@activity('GET_CFG').output.firstRow.synapse_object",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "LOG",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "UPSERT",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('UPSERT').output.executionDetails[1].status,'Succeeded')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "FAIL",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[SP_ETL_DATA_INSERT_LOG]",
								"storedProcedureParameters": {
									"err_mesg": {
										"value": {
											"value": "@activity('UPSERT').output.errors[0].Message",
											"type": "Expression"
										},
										"type": "String"
									},
									"load_cnt": {
										"value": {
											"value": "@activity('UPSERT').output.rowsRead",
											"type": "Expression"
										},
										"type": "Decimal"
									},
									"parm_from": {
										"value": null,
										"type": "String"
									},
									"parm_to": {
										"value": null,
										"type": "String"
									},
									"pgm_status": {
										"value": "E",
										"type": "String"
									},
									"run_pgm": {
										"value": {
											"value": "@concat('BRIDGE','_','SYN','_',activity('GET_CFG').output.firstRow.synapse_object_schema,'.',activity('GET_CFG').output.firstRow.synapse_object)",
											"type": "Expression"
										},
										"type": "String"
									},
									"st_date": {
										"value": {
											"value": "@formatDateTime(concat(substring(activity('GET_CFG').output.firstRow.yyyyMMddHHmmss,0,4),'-',substring(activity('GET_CFG').output.firstRow.yyyyMMddHHmmss,4,2),'-',substring(activity('GET_CFG').output.firstRow.yyyyMMddHHmmss,6,2)),'yyyy-MM-dd')",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"tgt_job_area": {
										"value": "ODS",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "syndpdatawarehouse",
								"type": "LinkedServiceReference"
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "SUCCESS",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[SP_ETL_DATA_INSERT_LOG]",
								"storedProcedureParameters": {
									"err_mesg": {
										"value": null,
										"type": "String"
									},
									"load_cnt": {
										"value": {
											"value": "@activity('UPSERT').output.rowsCopied",
											"type": "Expression"
										},
										"type": "Decimal"
									},
									"parm_from": {
										"value": null,
										"type": "String"
									},
									"parm_to": {
										"value": null,
										"type": "String"
									},
									"pgm_status": {
										"value": "S",
										"type": "String"
									},
									"run_pgm": {
										"value": {
											"value": "@concat('BRIDGE','_','SYN','_',activity('GET_CFG').output.firstRow.synapse_object_schema,'.',activity('GET_CFG').output.firstRow.synapse_object)",
											"type": "Expression"
										},
										"type": "String"
									},
									"st_date": {
										"value": {
											"value": "@formatDateTime(concat(substring(activity('GET_CFG').output.firstRow.yyyyMMddHHmmss,0,4),'-',substring(activity('GET_CFG').output.firstRow.yyyyMMddHHmmss,4,2),'-',substring(activity('GET_CFG').output.firstRow.yyyyMMddHHmmss,6,2)),'yyyy-MM-dd')",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"tgt_job_area": {
										"value": "ODS",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "syndpdatawarehouse",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			}
		],
		"variables": {
			"DESCRIPTION": {
				"type": "String",
				"defaultValue": "DASH_전사현황연결별도예상"
			},
			"BODY": {
				"type": "String",
				"defaultValue": "-------- BODY --------"
			},
			"IF_ID": {
				"type": "String",
				"defaultValue": "IF_SRD_DPS_EBIZ_0010"
			},
			"IF_REQ_DATA": {
				"type": "String",
				"defaultValue": "-------- PARAM --------"
			},
			"FROM_COLUMN": {
				"type": "String",
				"defaultValue": "YYYYMM"
			},
			"FROM": {
				"type": "String"
			}
		},
		"folder": {
			"name": "2ND PROJECT/1. EAI/EBIZ/UPSERT/yyyyMM v2"
		},
		"annotations": [],
		"lastPublishTime": "2023-02-07T08:25:49Z"
	}
}